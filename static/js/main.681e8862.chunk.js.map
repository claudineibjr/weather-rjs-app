{"version":3,"sources":["utils/utils.ts","data/model/WeatherInfo/WeatherInfo.ts","components/WeatherDailyInfo/index.tsx","data/model/WeatherInfo/DailyWeatherInfo.ts","data/model/WeatherInfo/HourlyWeatherInfo.ts","data/model/WeatherInfo/response/WeatherInfoMap.ts","data/model/OpenWeatherResponse/OpenWeatherMapBasicResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapDayResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse.ts","services/OpenWeatherMapApi.ts","components/DefaultAppBar/index.tsx","data/model/UserPreferences/UserLocation.ts","utils/locationUtils.ts","pages/HomePage/index.tsx","components/WeatherHourlyChart/index.tsx","pages/HourlyWeatherInfo/index.tsx","Routes.tsx","index.tsx"],"names":["DateUtilities","shortDays","days","map","dayName","substring","getDateAccordingToCurrentWeekDayName","replace","dayNameIndex","indexOf","dateAccordingToRelativeDay","getDateAccordingToRelativeDay","Error","date","Date","now","differenceDays","getDay","setDate","getDate","relativeDayName","toLowerCase","WeatherInfoEnum","WeatherDailyInfo","weatherDailyInfo","to","className","alt","src","wheaterInfoIcon","maxTemperature","minTemperature","WeatherInfo","wheaterInfo","this","DailyWeatherInfo","HourlyWeatherInfo","temperature","WeatherInfoMap","dt","temp","weather","weatherInfoMap","undefined","weatherInfoIcon","min","max","weatherInfoEnum","Clear","weatherInfo","icon","id","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clouds","_","OpenWeatherMapBasicResponse","lat","lon","timezone","timezone_offset","OpenWeatherMapDayResponse","hourly","OpenWeatherMapWeekResponse","dailyWeatherInfo","daily","sleep","milliseconds","Promise","resolve","setTimeout","loadWeekWeatherInfo","a","openWeatherMapWeekResponse","plainToClass","loadWeekWeatherInfoMockedData","process","loadDayWeatherInfo","openWeatherMapDayResponse","loadDayWeatherInfoMockedData","DefaultAppBar","AppBar","position","Toolbar","Typography","variant","toDateString","UserLocation","latitude","longitude","LocationUtilities","reject","loadCurrentUserGeolocation","userLocation","navigator","geolocation","getCurrentPosition","location","coords","HomePage","useState","weekWeatherInfos","setWeekWeatherInfos","isLoading","setLoading","setUserLocation","useEffect","weekWeatherInfo","toDailyWeatherInfo","sort","weatherInfoA","weatherInfoB","getTime","length","slice","all","loadCurrentUserLocation","console","log","fetchMyAPI","then","CircularProgress","dayWeatherInfo","WeatherHourlyChart","margin","width","height","innerWidth","innerHeight","d","getTemperatureValue","xDateValues","useMemo","scaleTime","range","domain","extent","yMin","yMax","yTemperatureValues","scaleLinear","nice","x","y","fill","rx","LinearGradient","from","vertical","Group","top","left","AreaClosed","data","yScale","AxisLeft","scale","label","stroke","AxisBottom","HourlyWeatherInfoPage","dayWeatherInfos","setDayWeatherInfos","useRouteMatch","path","toHourlyWeatherInfo","firstOfDay","filter","hourlyWeatherInfo","getHours","indexOfFirstOfDay","Routes","basename","day","__","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681e8862.chunk.js","sourcesContent":["export class DateUtilities {\r\n    static readonly days: Array<String> = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    static readonly shortDays: Array<String> = DateUtilities.days.map((dayName) => dayName.substring(0, 3));\r\n\r\n    static getDateAccordingToCurrentWeekDayName = (dayName: string): Date => {\r\n        dayName = dayName.replace('/', '');\r\n\r\n        const dayNameIndex = DateUtilities.days.indexOf(dayName);\r\n        if (dayNameIndex === -1) {\r\n            const dateAccordingToRelativeDay = DateUtilities.getDateAccordingToRelativeDay(dayName);\r\n            if (dateAccordingToRelativeDay !== null) {\r\n                throw new Error(`Date invalid - ${dayName}`);\r\n            }\r\n            return dateAccordingToRelativeDay!;\r\n        }\r\n\r\n        const date = new Date(Date.now());\r\n        const dayNameNowIndex = date.getDay();\r\n\r\n        let differenceDays = dayNameIndex - dayNameNowIndex;\r\n        if (differenceDays < 0) {\r\n            differenceDays = differenceDays * -1;\r\n        }\r\n        date.setDate(date.getDate() + differenceDays);\r\n\r\n        return date;\r\n    }\r\n\r\n    private static getDateAccordingToRelativeDay = (relativeDayName: string): Date | null => {\r\n        const date = new Date(Date.now());\r\n\r\n        switch (relativeDayName.toLowerCase()) {\r\n            case 'today':\r\n                return date;\r\n\r\n            case 'yesterday':\r\n                date.setDate(date.getDate() - 1);\r\n                return date;\r\n\r\n            case 'tomorrow':\r\n                date.setDate(date.getDate() + 1);\r\n                return date;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","export enum WeatherInfoEnum {\r\n    Thunderstorm,\r\n    Drizzle,\r\n    Rain,\r\n    Snow,\r\n    Atmosphere,\r\n    Clear,\r\n    Clouds,\r\n}\r\n\r\nexport class WeatherInfo {\r\n    date: Date;\r\n    wheaterInfo: WeatherInfoEnum;\r\n    wheaterInfoIcon: string;\r\n\r\n    constructor(date: Date, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        this.date = date;\r\n        this.wheaterInfo = wheaterInfo;\r\n        this.wheaterInfoIcon = wheaterInfoIcon;\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { DateUtilities } from '../../utils/utils';\r\nimport './styles.scss';\r\n\r\ntype WeatherDailyInfoProps = {\r\n  weatherDailyInfo: DailyWeatherInfo\r\n}\r\n\r\nexport const WeatherDailyInfo = ({ weatherDailyInfo }: WeatherDailyInfoProps) => {\r\n  return (\r\n    <Link\r\n      to={`/${DateUtilities.days[weatherDailyInfo.date.getDay()]}`}\r\n      className=\"DefaultAnchor\">\r\n      <div className=\"WeatherDailyInfoMain\">\r\n        <div className=\"DayName\">\r\n          {DateUtilities.shortDays[weatherDailyInfo.date.getDay()]}\r\n        </div>\r\n\r\n        <img className=\"WeatherIcon\"\r\n          alt=\"WeatherIcon\"\r\n          src={weatherDailyInfo.wheaterInfoIcon} />\r\n\r\n        <div className=\"Temperatures\">\r\n          <div className=\"MaxTemperature\">\r\n            {weatherDailyInfo.maxTemperature | 0}º\r\n          </div>\r\n          <div className=\"MinTemperature\">\r\n            {weatherDailyInfo.minTemperature | 0}º\r\n          </div>\r\n        </div >\r\n      </div>\r\n    </Link>\r\n  );\r\n}","import { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class DailyWeatherInfo extends WeatherInfo {\r\n    minTemperature: number;\r\n    maxTemperature: number;\r\n\r\n    constructor(date: Date, minTemperature: number, maxTemperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.minTemperature = minTemperature;\r\n        this.maxTemperature = maxTemperature;\r\n    }\r\n}","import { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class HourlyWeatherInfo extends WeatherInfo {\r\n    temperature: number;\r\n\r\n    constructor(date: Date, temperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.temperature = temperature;\r\n    }\r\n}","import { DailyWeatherInfo } from \"../DailyWeatherInfo\";\r\nimport { HourlyWeatherInfo } from \"../HourlyWeatherInfo\";\r\nimport { WeatherInfoEnum } from \"../WeatherInfo\";\r\nimport { WeatherInfoMapResponse } from \"./WeatherInfoMapResponse\";\r\nimport { WeatherInfoTemperatureMapResponse } from \"./WeatherInfoTemperature\";\r\n\r\nexport class WeatherInfoMap {\r\n    dt: number;\r\n    temp: WeatherInfoTemperatureMapResponse | number;\r\n    // temp: WeatherInfoTemperatureMapResponse;\r\n    weather: Array<WeatherInfoMapResponse>;\r\n\r\n    constructor(dt: number, temp: WeatherInfoTemperatureMapResponse | number, temperature: number, weather: Array<WeatherInfoMapResponse>) {\r\n        this.dt = dt;\r\n        this.temp = temp;\r\n        this.weather = weather;\r\n    }\r\n\r\n    static toDailyWeatherInfo(weatherInfoMap?: WeatherInfoMap): DailyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let minTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponse).min;\r\n            let maxTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponse).max;\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new DailyWeatherInfo(date, minTemperature, maxTemperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on converting\");\r\n        }\r\n    }\r\n\r\n    static toHourlyWeatherInfo(weatherInfoMap?: WeatherInfoMap): HourlyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let temperature: number = (weatherInfoMap.temp as number);\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new HourlyWeatherInfo(date, temperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on converting\");\r\n        }\r\n    }    \r\n}","export class OpenWeatherMapBasicResponse {\r\n    lat: number;\r\n    lon: number;\r\n    timezone: string;\r\n    timezone_offset: number;\r\n\r\n    constructor(lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n        this.timezone = timezone;\r\n        this.timezone_offset = timezone_offset;\r\n    }\r\n}","import { WeatherInfoMap } from \"../WeatherInfo/response/WeatherInfoMap\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport class OpenWeatherMapDayResponse extends OpenWeatherMapBasicResponse {\r\n    hourly: Array<WeatherInfoMap>;\r\n\r\n    constructor(hourly: Array<WeatherInfoMap>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.hourly = hourly;\r\n    }\r\n}","import { WeatherInfoMap } from \"../WeatherInfo/response/WeatherInfoMap\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport class OpenWeatherMapWeekResponse extends OpenWeatherMapBasicResponse {\r\n    daily: Array<WeatherInfoMap>;\r\n\r\n    constructor(dailyWeatherInfo: Array<WeatherInfoMap>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.daily = dailyWeatherInfo;\r\n    }\r\n}","import axios from \"axios\";\r\nimport { plainToClass } from \"class-transformer\";\r\nimport loadWeekWeatherInfoMockedData from \"../data/mock/loadWeekWeatherInfo.json\";\r\nimport loadDayWeatherInfoMockedData from \"../data/mock/loadDayWeatherInfo.json\";\r\nimport { OpenWeatherMapDayResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapDayResponse\";\r\nimport { OpenWeatherMapWeekResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse\";\r\n\r\nconst sleep = (milliseconds: number) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}\r\n\r\nexport async function loadWeekWeatherInfo(): Promise<OpenWeatherMapWeekResponse | undefined> {\r\n    // TODO: Map the data from JSON to OpenWeatherMapWeekResponse\r\n    let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, loadWeekWeatherInfoMockedData as Object);\r\n\r\n    await sleep(1000);\r\n\r\n    const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n\r\n    return openWeatherMapWeekResponse;\r\n\r\n    // try {\r\n    //     const response = await axios.get(\r\n    //         'https://api.openweathermap.org/data/2.5/onecall?lat=-21.9956977&lon=-47.9515105&exclude=minutely,hourly,alerts,current&appid=5bf4009a1c9ac711a96acf649074854f&units=imperial'\r\n    //     );\r\n\r\n    //     if (response.status === 200) {\r\n    //         let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, response.data as Object);\r\n    //         return openWeatherMapWeekResponse;\r\n    //     } else {\r\n    //         return undefined;\r\n    //     }\r\n    // } catch (_) {\r\n    //     return undefined;\r\n    // }\r\n}\r\n\r\nexport async function loadDayWeatherInfo(): Promise<OpenWeatherMapDayResponse | undefined> {\r\n    // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    let openWeatherMapDayResponse: OpenWeatherMapDayResponse = plainToClass(OpenWeatherMapDayResponse, loadDayWeatherInfoMockedData as Object);\r\n\r\n    await sleep(1000);\r\n\r\n    const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n\r\n    // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    return openWeatherMapDayResponse;\r\n\r\n    // try {\r\n    //     const response = await axios.get(\r\n    //         'https://api.openweathermap.org/data/2.5/onecall?lat=-21.9956977&lon=-47.9515105&exclude=minutely,alerts,current,daily&appid=5bf4009a1c9ac711a96acf649074854f&units=imperial'\r\n    //     );\r\n\r\n    //     if (response.status === 200) {\r\n    //         let openWeatherMapWeekResponse: OpenWeatherMapDayResponse = plainToClass(OpenWeatherMapDayResponse, response.data as Object);\r\n    //         return openWeatherMapWeekResponse;\r\n    //     } else {\r\n    //         return undefined;\r\n    //     }\r\n    // } catch (_) {\r\n    //     return undefined;\r\n    // }\r\n}","import AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport './styles.scss';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function DefaultAppBar() {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar className=\"DefaultAppBarMain\">\r\n                <Link to=\"/\" className=\"DefaultAnchor\">\r\n                    <Typography variant=\"h4\">\r\n                        Weather Info\r\n                    </Typography>\r\n                </Link>\r\n                <Typography variant=\"h6\">\r\n                    {new Date(Date.now()).toDateString()}\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}","export default class UserLocation {\r\n    latitude: number;\r\n    longitude: number;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    static defaultUserLocation(): UserLocation {\r\n        const oldTraffordStadiumLocation = new UserLocation(\r\n            53.4597954,\r\n            -2.2952338\r\n        );\r\n\r\n        return oldTraffordStadiumLocation;\r\n    }\r\n}","import UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\n\r\nexport class LocationUtilities {\r\n    static loadCurrentUserLocation(): Promise<UserLocation> {\r\n        return new Promise<UserLocation>(async (resolve, reject) => {            \r\n            let userLocation: UserLocation;\r\n            \r\n            try {\r\n                userLocation = await LocationUtilities.loadCurrentUserGeolocation();\r\n                \r\n                resolve(userLocation);\r\n            } catch(_) {\r\n                reject('User location unavaiable');\r\n            }\r\n        });\r\n    }\r\n    \r\n    private static loadCurrentUserGeolocation(): Promise<UserLocation> {\r\n        return new Promise<UserLocation>((resolve, reject) => {\r\n            try {\r\n                if (\"geolocation\" in navigator) {\r\n                    const successCallback = ((location: GeolocationPosition) => {\r\n                        const userLocation = new UserLocation(location.coords.latitude, location.coords.longitude);\r\n                        resolve(userLocation);\r\n                    });\r\n\r\n                    const errorCallback = (() => {\r\n                        reject('Geolocation is unavailable');\r\n                    });\r\n\r\n                    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n                } else {\r\n                    reject('Geolocation is unavailable');\r\n                }\r\n            } catch (_) {\r\n                reject(`Error on get user location - ${_}`);\r\n            }\r\n        });\r\n    }\r\n}","import { useEffect, useState } from 'react';\r\nimport { WeatherDailyInfo } from '../../components/WeatherDailyInfo';\r\nimport { WeatherInfoMap } from '../../data/model/WeatherInfo/response/WeatherInfoMap';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { loadWeekWeatherInfo } from '../../services/OpenWeatherMapApi';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './styles.scss';\r\nimport DefaultAppBar from '../../components/DefaultAppBar';\r\nimport { LocationUtilities } from '../../utils/locationUtils';\r\nimport UserLocation from '../../data/model/UserPreferences/UserLocation';\r\n\r\nexport function HomePage() {\r\n    const [weekWeatherInfos, setWeekWeatherInfos] = useState<Array<DailyWeatherInfo>>([]);\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [userLocation, setUserLocation] = useState<UserLocation | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        async function fetchMyAPI() {\r\n            const weekWeatherInfo = await loadWeekWeatherInfo();\r\n            if (weekWeatherInfo !== undefined) {\r\n                let weekWeatherInfos = weekWeatherInfo.daily.map((weatherInfoMap, _) => WeatherInfoMap.toDailyWeatherInfo(weatherInfoMap));\r\n                weekWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n                if (weekWeatherInfos.length > 5) {\r\n                    weekWeatherInfos = weekWeatherInfos.slice(0, 5);\r\n                }\r\n\r\n                setWeekWeatherInfos(weekWeatherInfos);\r\n            }\r\n        }\r\n\r\n        setLoading(true);\r\n        Promise.all([\r\n            new Promise<void>(async (resolve, _) => {\r\n                try {\r\n                    const userLocation = await LocationUtilities.loadCurrentUserLocation();\r\n                    setUserLocation(userLocation);\r\n                } catch(_) {\r\n                } finally {\r\n                    console.log(userLocation);\r\n                    resolve();\r\n                }\r\n            }),\r\n            fetchMyAPI(),\r\n        ]).then(() =>\r\n            setLoading(false)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HomePageMain\">\r\n            <DefaultAppBar />\r\n\r\n            <div className=\"WeekWeatherInfo\">\r\n                {isLoading ?\r\n                    <CircularProgress />\r\n                    : weekWeatherInfos !== undefined &&\r\n                    weekWeatherInfos.map((dayWeatherInfo, _) =>\r\n                        <WeatherDailyInfo weatherDailyInfo={dayWeatherInfo} />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useMemo } from 'react';\r\nimport { HourlyWeatherInfo } from '../../data/model/WeatherInfo/HourlyWeatherInfo';\r\n\r\nimport { scaleTime, scaleLinear } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { Group } from '@vx/group';\r\nimport { AreaClosed } from '@vx/shape';\r\nimport { LinearGradient } from '@vx/gradient';\r\nimport { extent, max, min } from 'd3-array';\r\n\r\ntype WeatherHourlyInfoProps = {\r\n  weatherDailyInfo: Array<HourlyWeatherInfo>\r\n}\r\n\r\nexport const WeatherHourlyChart = ({ weatherDailyInfo }: WeatherHourlyInfoProps) => {\r\n  // Dimensions\r\n  const margin = {\r\n    top: 30,\r\n    left: 60,\r\n    right: 40,\r\n    bottom: 80,\r\n  };\r\n\r\n  const width = 640 + margin.left + margin.right;\r\n  const height = 360 + margin.top + margin.bottom;\r\n\r\n  // Bounds\r\n  const innerWidth = width - margin.left - margin.right;\r\n  const innerHeight = height - margin.top - margin.bottom;\r\n\r\n  // Accessors\r\n  const getDate = (d: HourlyWeatherInfo): Date => d.date;\r\n  const getTemperatureValue = (d: HourlyWeatherInfo): number => d.temperature;\r\n\r\n  // Scales\r\n  const xDateValues = useMemo(\r\n    () =>\r\n      scaleTime({\r\n        range: [margin.left, innerWidth + margin.left],\r\n        domain: extent(weatherDailyInfo, getDate) as [Date, Date],\r\n      }),\r\n    [innerWidth, margin.left],\r\n  );\r\n\r\n  const yMin = (min(weatherDailyInfo, getTemperatureValue) || 0);\r\n  const yMax = (max(weatherDailyInfo, getTemperatureValue) || 0);\r\n  const yTemperatureValues = useMemo(\r\n    () =>\r\n      scaleLinear({\r\n        range: [innerHeight + margin.top, margin.top],\r\n        domain: [yMin, yMax],\r\n        nice: true,\r\n      }),\r\n    [margin.top, innerHeight],\r\n  );\r\n\r\n  return (\r\n    <div className=\"WeatherHourlyChartMain\">\r\n      <svg width={width} height={height}>\r\n        <rect\r\n          x={margin.left}\r\n          y={margin.top}\r\n          width={innerWidth}\r\n          height={innerHeight}\r\n          fill=\"url(#area-background-gradient)\"\r\n          rx={14}\r\n        />\r\n        <LinearGradient id=\"area-background-gradient\" from=\"#f3f3f3\" to=\"#e2e2e2\" vertical />\r\n        <LinearGradient\r\n          from='#FF8F00'\r\n          to='#FFE082'\r\n          id='gradient'\r\n          vertical={false}\r\n        />\r\n        <Group top={0} left={0}>\r\n          <AreaClosed<HourlyWeatherInfo>\r\n            data={weatherDailyInfo}\r\n            x={d => xDateValues(getDate(d)) ?? 0}\r\n            y={d => yTemperatureValues(getTemperatureValue(d)) ?? 0}\r\n            yScale={yTemperatureValues}\r\n            fill=\"url(#gradient)\"\r\n          />\r\n\r\n          <AxisLeft\r\n            scale={yTemperatureValues}\r\n            top={0}\r\n            left={margin.left}\r\n            label={'Temperature (Fº)'}\r\n            stroke={'#1b1a1e'}\r\n          />\r\n\r\n          <AxisBottom\r\n            scale={xDateValues}\r\n            top={innerHeight + margin.top}\r\n            label={'Hour'}\r\n            stroke={'#1b1a1e'}\r\n          />\r\n        </Group>\r\n      </svg>\r\n    </div>\r\n  );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { WeatherHourlyChart } from \"../../components/WeatherHourlyChart\";\r\nimport { HourlyWeatherInfo } from \"../../data/model/WeatherInfo/HourlyWeatherInfo\";\r\nimport { WeatherInfoMap } from \"../../data/model/WeatherInfo/response/WeatherInfoMap\";\r\nimport { loadDayWeatherInfo } from \"../../services/OpenWeatherMapApi\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './styles.scss';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport DefaultAppBar from \"../../components/DefaultAppBar\";\r\nimport { DateUtilities } from \"../../utils/utils\";\r\nimport { LocationUtilities } from \"../../utils/locationUtils\";\r\nimport UserLocation from \"../../data/model/UserPreferences/UserLocation\";\r\n\r\nexport default function HourlyWeatherInfoPage() {\r\n    const [dayWeatherInfos, setDayWeatherInfos] = useState<Array<HourlyWeatherInfo> | undefined>(undefined);\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [userLocation, setUserLocation] = useState<UserLocation | undefined>(undefined);\r\n\r\n    const { path } = useRouteMatch();\r\n\r\n    const day = (): Date => DateUtilities.getDateAccordingToCurrentWeekDayName(path);\r\n\r\n    useEffect(() => {\r\n        async function fetchMyAPI() {\r\n            const dayWeatherInfo = await loadDayWeatherInfo();\r\n            if (dayWeatherInfo !== undefined) {\r\n                let dayWeatherInfos: Array<HourlyWeatherInfo> = dayWeatherInfo.hourly.map((weatherInfoMap, _) => WeatherInfoMap.toHourlyWeatherInfo(weatherInfoMap));\r\n                dayWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n                let firstOfDay: HourlyWeatherInfo = dayWeatherInfos.filter((hourlyWeatherInfo) => hourlyWeatherInfo.date.getHours() === 0)[0];\r\n                let indexOfFirstOfDay = dayWeatherInfos.indexOf(firstOfDay);\r\n                dayWeatherInfos = dayWeatherInfos.slice(indexOfFirstOfDay, indexOfFirstOfDay + 24);\r\n\r\n                setDayWeatherInfos(dayWeatherInfos);\r\n            }\r\n\r\n        }\r\n\r\n        setLoading(true);\r\n        Promise.all([\r\n            new Promise<void>(async (resolve, _) => {\r\n                try {\r\n                    const userLocation = await LocationUtilities.loadCurrentUserLocation();\r\n                    setUserLocation(userLocation);\r\n                } catch (_) {\r\n                } finally {\r\n                    console.log(userLocation);\r\n                    resolve();\r\n                }\r\n            }),\r\n            fetchMyAPI(),\r\n        ]).then(() =>\r\n            setLoading(false)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HourlyWeatherInfoMain\">\r\n            <DefaultAppBar />\r\n\r\n            <div className=\"HourlyWeatherInfoChart\">\r\n                {isLoading ?\r\n                    <CircularProgress />\r\n                    : dayWeatherInfos !== undefined &&\r\n                    <WeatherHourlyChart\r\n                        weatherDailyInfo={dayWeatherInfos} />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport { HomePage } from \"./pages/HomePage\";\r\nimport HourlyWeatherInfoPage from \"./pages/HourlyWeatherInfo\";\r\nimport { DateUtilities } from \"./utils/utils\";\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Switch>\r\n                <Route path={\r\n                    [\r\n                        ...[\"/today\", \"/tomorrow\", \"/yesterday\"],\r\n                        ...DateUtilities.days.map((day, _, __) => `/${day}`)\r\n                    ]}\r\n                    component={HourlyWeatherInfoPage}\r\n                />\r\n                <Route path=\"/\" component={HomePage} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Routes from './Routes';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Routes />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}