{"version":3,"sources":["utils/utils.ts","data/model/WeatherInfo/WeatherInfo.ts","components/WeatherDailyInfo/index.tsx","data/model/WeatherInfo/DailyWeatherInfo.ts","data/model/WeatherInfo/HourlyWeatherInfo.ts","data/model/WeatherInfo/response/WeatherInfoMap.ts","data/model/OpenWeatherResponse/OpenWeatherMapBasicResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapDayResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse.ts","pages/HomePage/index.tsx","services/OpenWeatherMapApi.ts","components/WeatherHourlyChart/index.tsx","pages/HourlyWeatherInfo/index.tsx","index.tsx"],"names":["DateUtilities","shortDays","days","map","dayName","substring","WeatherInfoEnum","WeatherDailyInfo","weatherDailyInfo","className","to","date","getDay","alt","src","wheaterInfoIcon","maxTemperature","minTemperature","WeatherInfo","wheaterInfo","this","DailyWeatherInfo","HourlyWeatherInfo","temperature","WeatherInfoMap","dt","temp","weather","weatherInfoMap","undefined","Error","weatherInfoIcon","Date","min","max","weatherInfoEnum","Clear","weatherInfo","icon","id","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clouds","_","OpenWeatherMapBasicResponse","lat","lon","timezone","timezone_offset","OpenWeatherMapDayResponse","hourly","OpenWeatherMapWeekResponse","dailyWeatherInfo","daily","HomePage","useState","weekWeatherInfos","setWeekWeatherInfos","useEffect","weekWeatherInfo","plainToClass","loadWeekWeatherInfoMockedData","toDailyWeatherInfo","sort","weatherInfoA","weatherInfoB","getTime","length","slice","AppBar","position","Toolbar","Typography","variant","now","toDateString","dayWeatherInfo","WeatherHourlyChart","margin","width","height","innerWidth","innerHeight","getDate","d","getTemperatureValue","xDateValues","useMemo","scaleTime","range","domain","extent","yMin","yMax","yTemperatureValues","scaleLinear","nice","x","y","fill","rx","LinearGradient","from","vertical","Group","top","left","AreaClosed","data","yScale","AxisLeft","scale","label","stroke","AxisBottom","HourlyWeatherInfoPage","dayWeatherInfos","setDayWeatherInfos","loadDayWeatherInfoMockedData","toHourlyWeatherInfo","firstOfDay","filter","hourlyWeatherInfo","getHours","indexOfFirstOfDay","indexOf","ReactDOM","render","StrictMode","path","day","__","document","getElementById"],"mappings":"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","file":"static/js/main.1309ad4f.chunk.js","sourcesContent":["export class DateUtilities {\r\n    static readonly days: Array<String> = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    static readonly shortDays: Array<String> = DateUtilities.days.map((dayName) => dayName.substring(0, 3));\r\n}","export enum WeatherInfoEnum {\r\n    Thunderstorm,\r\n    Drizzle,\r\n    Rain,\r\n    Snow,\r\n    Atmosphere,\r\n    Clear,\r\n    Clouds,\r\n}\r\n\r\nexport class WeatherInfo {\r\n    date: Date;\r\n    wheaterInfo: WeatherInfoEnum;\r\n    wheaterInfoIcon: string;\r\n\r\n    constructor(date: Date, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        this.date = date;\r\n        this.wheaterInfo = wheaterInfo;\r\n        this.wheaterInfoIcon = wheaterInfoIcon;\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { DateUtilities } from '../../utils/utils';\r\nimport './styles.scss';\r\n\r\ntype WeatherDailyInfoProps = {\r\n  weatherDailyInfo: DailyWeatherInfo\r\n}\r\n\r\nexport const WeatherDailyInfo = ({ weatherDailyInfo }: WeatherDailyInfoProps) => (\r\n    <Link className=\"DefaultAnchor\"\r\n    to={`/${DateUtilities.days[weatherDailyInfo.date.getDay()]}`}>\r\n      <div className=\"WeatherDailyInfoMain\">\r\n          <div className=\"DayName\">\r\n            {DateUtilities.shortDays[weatherDailyInfo.date.getDay()]}\r\n          </div>\r\n        \r\n        <img className=\"WeatherIcon\"\r\n          alt=\"WeatherIcon\"\r\n          src={weatherDailyInfo.wheaterInfoIcon} />\r\n\r\n        <div className=\"Temperatures\">\r\n          <div className=\"MaxTemperature\">\r\n            {weatherDailyInfo.maxTemperature | 0}ยบ\r\n          </div>\r\n          <div className=\"MinTemperature\">\r\n            {weatherDailyInfo.minTemperature | 0}ยบ\r\n          </div>\r\n        </div >\r\n      </div>\r\n    </Link>\r\n);","import { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class DailyWeatherInfo extends WeatherInfo {\r\n    minTemperature: number;\r\n    maxTemperature: number;\r\n\r\n    constructor(date: Date, minTemperature: number, maxTemperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.minTemperature = minTemperature;\r\n        this.maxTemperature = maxTemperature;\r\n    }\r\n}","import { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class HourlyWeatherInfo extends WeatherInfo {\r\n    temperature: number;\r\n\r\n    constructor(date: Date, temperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.temperature = temperature;\r\n    }\r\n}","import { DailyWeatherInfo } from \"../DailyWeatherInfo\";\r\nimport { HourlyWeatherInfo } from \"../HourlyWeatherInfo\";\r\nimport { WeatherInfoEnum } from \"../WeatherInfo\";\r\nimport { WeatherInfoMapResponse } from \"./WeatherInfoMapResponse\";\r\nimport { WeatherInfoTemperatureMapResponse } from \"./WeatherInfoTemperature\";\r\n\r\nexport class WeatherInfoMap {\r\n    dt: number;\r\n    temp: WeatherInfoTemperatureMapResponse | number;\r\n    // temp: WeatherInfoTemperatureMapResponse;\r\n    weather: Array<WeatherInfoMapResponse>;\r\n\r\n    constructor(dt: number, temp: WeatherInfoTemperatureMapResponse | number, temperature: number, weather: Array<WeatherInfoMapResponse>) {\r\n        this.dt = dt;\r\n        this.temp = temp;\r\n        this.weather = weather;\r\n    }\r\n\r\n    static toDailyWeatherInfo(weatherInfoMap?: WeatherInfoMap): DailyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let minTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponse).min;\r\n            let maxTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponse).max;\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new DailyWeatherInfo(date, minTemperature, maxTemperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on converting\");\r\n        }\r\n    }\r\n\r\n    static toHourlyWeatherInfo(weatherInfoMap?: WeatherInfoMap): HourlyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let temperature: number = (weatherInfoMap.temp as number);\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new HourlyWeatherInfo(date, temperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on converting\");\r\n        }\r\n    }    \r\n}","export class OpenWeatherMapBasicResponse {\r\n    lat: number;\r\n    lon: number;\r\n    timezone: string;\r\n    timezone_offset: number;\r\n\r\n    constructor(lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n        this.timezone = timezone;\r\n        this.timezone_offset = timezone_offset;\r\n    }\r\n}","import { WeatherInfoMap } from \"../WeatherInfo/response/WeatherInfoMap\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport class OpenWeatherMapDayResponse extends OpenWeatherMapBasicResponse {\r\n    hourly: Array<WeatherInfoMap>;\r\n\r\n    constructor(hourly: Array<WeatherInfoMap>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.hourly = hourly;\r\n    }\r\n}","import { WeatherInfoMap } from \"../WeatherInfo/response/WeatherInfoMap\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport class OpenWeatherMapWeekResponse extends OpenWeatherMapBasicResponse {\r\n    daily: Array<WeatherInfoMap>;\r\n\r\n    constructor(dailyWeatherInfo: Array<WeatherInfoMap>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.daily = dailyWeatherInfo;\r\n    }\r\n}","import { useEffect, useState } from 'react';\r\nimport { WeatherDailyInfo } from '../../components/WeatherDailyInfo';\r\nimport { WeatherInfoMap } from '../../data/model/WeatherInfo/response/WeatherInfoMap';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { loadWeekWeatherInfo } from '../../services/OpenWeatherMapApi';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './styles.scss';\r\n\r\nexport function HomePage() {\r\n    const [weekWeatherInfos, setWeekWeatherInfos] = useState<Array<DailyWeatherInfo>>([]);\r\n\r\n    useEffect(() => {\r\n        const weekWeatherInfo = loadWeekWeatherInfo();\r\n        if (weekWeatherInfo !== undefined) {\r\n            let weekWeatherInfos = weekWeatherInfo.daily.map((weatherInfoMap, _) => WeatherInfoMap.toDailyWeatherInfo(weatherInfoMap));\r\n            weekWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoB.date.getTime() - weatherInfoA.date.getTime());\r\n            if (weekWeatherInfos.length > 5) {\r\n                weekWeatherInfos = weekWeatherInfos.slice(0, 5);\r\n            }\r\n\r\n            setWeekWeatherInfos(weekWeatherInfos);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HomePageMain\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar className=\"HomePageToolbar\">\r\n                    <Typography variant=\"h4\">\r\n                        Weather Info\r\n                    </Typography>\r\n                    <Typography variant=\"h6\">\r\n                        {new Date(Date.now()).toDateString()}\r\n                    </Typography>                    \r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <div className=\"WeekWeatherInfo\">\r\n                {weekWeatherInfos !== undefined &&\r\n                    weekWeatherInfos.map((dayWeatherInfo, _) =>\r\n                        <WeatherDailyInfo weatherDailyInfo={dayWeatherInfo} />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { plainToClass } from \"class-transformer\";\r\nimport loadWeekWeatherInfoMockedData from \"../data/mock/loadWeekWeatherInfo.json\";\r\nimport loadDayWeatherInfoMockedData from \"../data/mock/loadDayWeatherInfo.json\";\r\nimport { OpenWeatherMapDayResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapDayResponse\";\r\nimport { OpenWeatherMapWeekResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse\";\r\n\r\nexport function loadWeekWeatherInfo(): OpenWeatherMapWeekResponse | undefined {\r\n    // TODO: Map the data from JSON to OpenWeatherMapWeekResponse\r\n    let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, loadWeekWeatherInfoMockedData as Object);\r\n\r\n    return openWeatherMapWeekResponse;\r\n}\r\n\r\nexport function loadDayWeatherInfo(): OpenWeatherMapDayResponse | undefined {\r\n    // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    let openWeatherMapDayResponse: OpenWeatherMapDayResponse = plainToClass(OpenWeatherMapDayResponse, loadDayWeatherInfoMockedData as Object);\r\n\r\n    // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    return openWeatherMapDayResponse;\r\n}","import React, { useMemo } from 'react';\r\nimport { HourlyWeatherInfo } from '../../data/model/WeatherInfo/HourlyWeatherInfo';\r\n\r\nimport { scaleTime, scaleLinear } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { Group } from '@vx/group';\r\nimport { AreaClosed } from '@vx/shape';\r\nimport { LinearGradient } from '@vx/gradient';\r\nimport { extent, max, min } from 'd3-array';\r\n\r\ntype WeatherHourlyInfoProps = {\r\n  weatherDailyInfo: Array<HourlyWeatherInfo>\r\n}\r\n\r\nexport const WeatherHourlyChart = ({ weatherDailyInfo }: WeatherHourlyInfoProps) => {\r\n  // Dimensions\r\n  const margin = {\r\n    top: 30,\r\n    left: 60,\r\n    right: 40,\r\n    bottom: 80,\r\n  };\r\n\r\n  const width = 640 + margin.left + margin.right;\r\n  const height = 360 + margin.top + margin.bottom;\r\n\r\n  // Bounds\r\n  const innerWidth = width - margin.left - margin.right;\r\n  const innerHeight = height - margin.top - margin.bottom;\r\n\r\n  // Accessors\r\n  const getDate = (d: HourlyWeatherInfo): Date => d.date;\r\n  const getTemperatureValue = (d: HourlyWeatherInfo): number => d.temperature;\r\n\r\n  // Scales\r\n  const xDateValues = useMemo(\r\n    () =>\r\n      scaleTime({\r\n        range: [margin.left, innerWidth + margin.left],\r\n        domain: extent(weatherDailyInfo, getDate) as [Date, Date],\r\n      }),\r\n    [innerWidth, margin.left],\r\n  );\r\n\r\n  const yMin = (min(weatherDailyInfo, getTemperatureValue) || 0);\r\n  const yMax = (max(weatherDailyInfo, getTemperatureValue) || 0);\r\n  const yTemperatureValues = useMemo(\r\n    () =>\r\n      scaleLinear({\r\n        range: [innerHeight + margin.top, margin.top],\r\n        domain: [yMin, yMax],\r\n        nice: true,\r\n      }),\r\n    [margin.top, innerHeight],\r\n  );\r\n\r\n  return (\r\n    <div className=\"WeatherHourlyChartMain\">\r\n      <svg width={width} height={height}>\r\n        <rect\r\n          x={margin.left}\r\n          y={margin.top}\r\n          width={innerWidth}\r\n          height={innerHeight}\r\n          fill=\"url(#area-background-gradient)\"\r\n          rx={14}\r\n        />\r\n        <LinearGradient id=\"area-background-gradient\" from=\"#f3f3f3\" to=\"#e2e2e2\" vertical />\r\n        <LinearGradient\r\n          from='#FF8F00'\r\n          to='#FFE082'\r\n          id='gradient'\r\n          vertical={false}\r\n        />\r\n        <Group top={0} left={0}>\r\n          <AreaClosed<HourlyWeatherInfo>\r\n            data={weatherDailyInfo}\r\n            x={d => xDateValues(getDate(d)) ?? 0}\r\n            y={d => yTemperatureValues(getTemperatureValue(d)) ?? 0}\r\n            yScale={yTemperatureValues}\r\n            fill=\"url(#gradient)\"\r\n          />\r\n\r\n          <AxisLeft\r\n            scale={yTemperatureValues}\r\n            top={0}\r\n            left={margin.left}\r\n            label={'Temperature (Fยบ)'}\r\n            stroke={'#1b1a1e'}\r\n          />\r\n\r\n          <AxisBottom\r\n            scale={xDateValues}\r\n            top={innerHeight + margin.top}\r\n            label={'Hour'}\r\n            stroke={'#1b1a1e'}\r\n          />\r\n        </Group>\r\n      </svg>\r\n    </div>\r\n  );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { WeatherHourlyChart } from \"../../components/WeatherHourlyChart\";\r\nimport { HourlyWeatherInfo } from \"../../data/model/WeatherInfo/HourlyWeatherInfo\";\r\nimport { WeatherInfoMap } from \"../../data/model/WeatherInfo/response/WeatherInfoMap\";\r\nimport { loadDayWeatherInfo } from \"../../services/OpenWeatherMapApi\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './styles.scss';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function HourlyWeatherInfoPage() {\r\n    const [dayWeatherInfos, setDayWeatherInfos] = useState<Array<HourlyWeatherInfo> | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const dayWeatherInfo = loadDayWeatherInfo();\r\n        if (dayWeatherInfo !== undefined) {\r\n            let dayWeatherInfos: Array<HourlyWeatherInfo> = dayWeatherInfo.hourly.map((weatherInfoMap, _) => WeatherInfoMap.toHourlyWeatherInfo(weatherInfoMap));\r\n            dayWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n            let firstOfDay: HourlyWeatherInfo = dayWeatherInfos.filter((hourlyWeatherInfo) => hourlyWeatherInfo.date.getHours() === 0)[0];\r\n            let indexOfFirstOfDay = dayWeatherInfos.indexOf(firstOfDay);\r\n            dayWeatherInfos = dayWeatherInfos.slice(indexOfFirstOfDay, indexOfFirstOfDay + 24);\r\n\r\n            setDayWeatherInfos(dayWeatherInfos);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HourlyWeatherInfoMain\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar className=\"HourlyWeatherInfoToolbar\">\r\n                    <Link to=\"/\" className=\"DefaultAnchor\">\r\n                        <Typography variant=\"h4\">\r\n                            Weather Info\r\n                        </Typography>\r\n                    </Link>\r\n                    <Typography variant=\"h6\">\r\n                        {new Date(Date.now()).toDateString()}\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {dayWeatherInfos !== undefined ?\r\n                <div className=\"HourlyWeatherInfoChart\">\r\n                    <WeatherHourlyChart\r\n                        weatherDailyInfo={dayWeatherInfos} />\r\n                </div>\r\n                : 'Loading...'\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { HomePage } from './pages/HomePage';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport HourlyWeatherInfoPage from './pages/HourlyWeatherInfo';\r\nimport { DateUtilities } from './utils/utils';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n        <Switch>\r\n          <Route path={\r\n            [\r\n              ...[\"/today\", \"/tomorrow\", \"/yesterday\"],\r\n              ...DateUtilities.days.map((day, _, __) => `/${day}`)\r\n            ]} >\r\n            <HourlyWeatherInfoPage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <HomePage />\r\n          </Route>\r\n        </Switch>\r\n    </Router>    \r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}