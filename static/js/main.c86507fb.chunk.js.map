{"version":3,"sources":["utils/dateUtils.ts","components/WeatherDailyInfo/index.tsx","components/DefaultAppBar/index.tsx","store/root-reducer.ts","data/model/UserPreferences/UserLocation.ts","utils/locationUtils.ts","data/model/WeatherInfo/WeatherInfo.ts","store/root-redux.ts","data/model/WeatherInfo/DailyWeatherInfo.ts","data/model/WeatherInfo/HourlyWeatherInfo.ts","data/model/OpenWeatherResponse/OpenWeatherMap5Day3HoursWeatherInfoResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapBasicResponse.ts","services/OpenWeatherMapApi.ts","utils/weatherDataUtilis.ts","pages/HomePage/index.tsx","hook/useWindowDimensionsHook.tsx","components/WeatherHourlyChart/WeatherHourlyChartComponent.tsx","components/WeatherHourlyChart/index.tsx","pages/HourlyWeatherInfo/index.tsx","store/index.ts","Routes.tsx","index.tsx"],"names":["DateUtilities","shortDays","days","map","dayName","substring","getDateAccordingToCurrentWeekDayName","replace","dayNameIndex","indexOf","dateAccordingToRelativeDay","getDateAccordingToRelativeDay","Error","date","Date","now","differenceDays","getDay","setDate","getDate","relativeDayName","toLowerCase","dateIsAfterToday","comparativeDate","resetHourMinuteSecondMillisecond","getFullYear","getMonth","setHours","setMinutes","setSeconds","setMilliseconds","WeatherDailyInfo","weatherDailyInfo","to","className","alt","src","wheaterInfoIcon","maxTemperature","minTemperature","DefaultAppBar","userLocation","useSelector","state","AppBar","position","Toolbar","Typography","variant","toDateString","name","ActionType","UserLocation","latitude","longitude","this","LocationUtilities","updateUserLocationFunction","Promise","resolve","_","a","undefined","loadCurrentUserLocation","reject","navigator","geolocation","getCurrentPosition","location","coords","initialState","weekWeatherInfos","hourlyWeatherInfos","isLoadingDetailedData","WeatherInfoEnum","RootDispatcher","dispatch","updateUserLocation","type","UpdateUserLocation","payload","updateWeekWeatherInfos","UpdateWeekWeatherInfos","updateHourlyWeatherInfos","UpdateHourlyWeatherInfos","setIsLoadingDetailedData","SetIsLoadingDetailedData","WeatherInfo","wheaterInfo","whaterInfoText","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","DailyWeatherInfo","weatherInfoMap","weatherInfoIcon","dt","temp","min","max","weatherInfoEnum","weatherInfo","weather","icon","id","HourlyWeatherInfo","temperature","weatherInfo5Days3HoursForecastMapInterface","main","OpenWeatherMap5Day3HoursWeatherInfoResponse","cod","list","city","OpenWeatherMapWeekResponse","dailyWeatherInfo","lat","lon","timezone","timezone_offset","daily","loadWeekWeatherInfo","process","axios","get","response","status","openWeatherMapWeekResponse","plainToClass","data","load5Days3HoursForecastWeatherInfo","openWeatherMap5Day3HoursWeatherInfoResponse","WeatherDataUtilities","setIsLoadingDetailedDataFunction","updateHourlyWeatherInfosFunction","updateWeekWeatherInfosFunction","then","hourlyWeatherInfo","hourWeatherInfos","hourlyWeatherInfoMap","fromWeatherInfo5Days3HoursForecastMapInterface","sort","weatherInfoA","weatherInfoB","getTime","coord","weekWeatherInfo","fromWeatherInfoMapInterface","filter","length","slice","HomePage","useState","isLoading","setLoading","rootDispatcher","useDispatch","useEffect","fetchMyAPI","loadData","loadUserLocationIfNeeded","CircularProgress","dayWeatherInfo","getWindowDimensions","window","width","innerWidth","height","innerHeight","withTooltip","d","margin","top","right","bottom","left","showTooltip","hideTooltip","tooltipData","tooltipTop","tooltipLeft","chartScale","getTemperatureValue","bisectDate","bisector","yMin","yMax","xDateValues","useMemo","scaleTime","range","domain","extent","yTemperatureValues","scaleLinear","nice","mainColor","tooltipStyles","defaultStyles","background","border","color","handleTooltip","useCallback","event","x","localPoint","x0","invert","index","d0","d1","valueOf","y","fill","rx","LinearGradient","from","vertical","Group","AreaClosed","yScale","Bar","onTouchStart","onTouchMove","onMouseMove","onMouseLeave","AxisLeft","scale","label","stroke","AxisBottom","Line","strokeWidth","pointerEvents","strokeDasharray","cx","cy","r","fillOpacity","strokeOpacity","TooltipWithBounds","style","Math","random","Tooltip","minWidth","textAlign","transform","toLocaleTimeString","WeatherHourlyChart","chartWidth","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","chartHeight","WeatherHourlyChartComponent","HourlyWeatherInfoPage","localHourlyWeatherInfos","setLocalHourlyWeatherInfos","dateAccordingToCurrentWeekDayName","setDateAccordingToCurrentWeekDayName","setChartScale","history","useHistory","path","useRouteMatch","hourly","yMean","mean","ButtonGroup","weekDay","isSelected","Button","onClick","push","toString","store","createStore","action","Routes","day","__","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c86507fb.chunk.js","sourcesContent":["export class DateUtilities {\r\n    static readonly days: Array<String> = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    static readonly shortDays: Array<String> = DateUtilities.days.map((dayName) => dayName.substring(0, 3));\r\n\r\n    static getDateAccordingToCurrentWeekDayName = (dayName: string): Date => {\r\n        dayName = dayName.replace('/', '');\r\n\r\n        const dayNameIndex = DateUtilities.days.indexOf(dayName);\r\n        if (dayNameIndex === -1) {\r\n            const dateAccordingToRelativeDay = DateUtilities.getDateAccordingToRelativeDay(dayName);\r\n            if (dateAccordingToRelativeDay !== null) {\r\n                throw new Error(`Date invalid - ${dayName}`);\r\n            }\r\n            return dateAccordingToRelativeDay!;\r\n        }\r\n\r\n        const date = new Date(Date.now());\r\n        const dayNameNowIndex = date.getDay();\r\n\r\n        let differenceDays = dayNameIndex - dayNameNowIndex;\r\n        if (differenceDays < 0) {\r\n            differenceDays = differenceDays + 7;\r\n        }\r\n        date.setDate(date.getDate() + differenceDays);\r\n\r\n        return date;\r\n    }\r\n\r\n    private static getDateAccordingToRelativeDay = (relativeDayName: string): Date | null => {\r\n        const date = new Date(Date.now());\r\n\r\n        switch (relativeDayName.toLowerCase()) {\r\n            case 'today':\r\n                return date;\r\n\r\n            case 'yesterday':\r\n                date.setDate(date.getDate() - 1);\r\n                return date;\r\n\r\n            case 'tomorrow':\r\n                date.setDate(date.getDate() + 1);\r\n                return date;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static dateIsAfterToday = (comparativeDate: Date): boolean => {\r\n        const now = DateUtilities.resetHourMinuteSecondMillisecond(new Date(Date.now()));\r\n        comparativeDate = DateUtilities.resetHourMinuteSecondMillisecond(comparativeDate);\r\n        \r\n        if (now.getFullYear() === comparativeDate.getFullYear()) {\r\n            if (now.getMonth() === comparativeDate.getMonth()) {\r\n                return comparativeDate.getDate() > now.getDate();\r\n            } else {\r\n                return comparativeDate.getMonth() > now.getMonth();\r\n            }\r\n        } else {\r\n            return comparativeDate.getFullYear() > now.getFullYear();\r\n        }\r\n    }\r\n\r\n    private static resetHourMinuteSecondMillisecond = (date: Date): Date => {\r\n        date.setHours(0);\r\n        date.setMinutes(0);\r\n        date.setSeconds(0);\r\n        date.setMilliseconds(0);\r\n        \r\n        return date;\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { DateUtilities } from '../../utils/dateUtils';\r\nimport './styles.scss';\r\n\r\ntype WeatherDailyInfoProps = {\r\n  weatherDailyInfo: DailyWeatherInfo\r\n}\r\n\r\nexport const WeatherDailyInfo = ({ weatherDailyInfo }: WeatherDailyInfoProps) => {\r\n  return (\r\n    <Link\r\n      to={`/${DateUtilities.days[weatherDailyInfo.date.getDay()]}`}\r\n      className=\"DefaultAnchor\">\r\n      <div className=\"WeatherDailyInfoMain\">\r\n        <div className=\"DayName\">\r\n          {DateUtilities.shortDays[weatherDailyInfo.date.getDay()]}\r\n        </div>\r\n\r\n        <img className=\"WeatherIcon\"\r\n          alt=\"WeatherIcon\"\r\n          src={weatherDailyInfo.wheaterInfoIcon} />\r\n\r\n        <div className=\"Temperatures\">\r\n          <div className=\"MaxTemperature\">\r\n            {weatherDailyInfo.maxTemperature | 0}º\r\n          </div>\r\n          <div className=\"MinTemperature\">\r\n            {weatherDailyInfo.minTemperature | 0}º\r\n          </div>\r\n        </div >\r\n      </div>\r\n    </Link>\r\n  );\r\n}","import AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport './styles.scss';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\nimport UserLocation from '../../data/model/UserPreferences/UserLocation';\r\n\r\ninterface StateInterfaceProps {\r\n    userLocation: UserLocation | undefined;\r\n}\r\n\r\nexport default function DefaultAppBar() {\r\n    const { userLocation } = useSelector<StateInterfaceProps, StateInterfaceProps>((state: StateInterfaceProps) => {\r\n        return {\r\n            userLocation: state.userLocation,\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar className=\"DefaultAppBarMain\">\r\n                <Link to=\"/\" className=\"DefaultAnchor\">\r\n                    <Typography variant=\"h4\">\r\n                        Weather Info\r\n                    </Typography>\r\n                </Link>\r\n                <div>\r\n                    <Typography variant=\"h6\">\r\n                        {new Date(Date.now()).toDateString()}\r\n                    </Typography>\r\n                    {userLocation &&\r\n                        userLocation.name\r\n                    }\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}","import { Action, Reducer } from \"redux\";\r\nimport UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\nimport { DailyWeatherInfo } from \"../data/model/WeatherInfo/DailyWeatherInfo\";\r\nimport { HourlyWeatherInfo } from \"../data/model/WeatherInfo/HourlyWeatherInfo\";\r\n\r\nexport interface StateInterface {\r\n    userLocation: UserLocation | undefined;\r\n    weekWeatherInfos: Array<DailyWeatherInfo> | undefined;\r\n    hourlyWeatherInfos: Array<HourlyWeatherInfo> | undefined;\r\n    isLoadingDetailedData?: boolean;\r\n}\r\n\r\nconst initialState: StateInterface = {\r\n    userLocation: undefined,\r\n    weekWeatherInfos: undefined,\r\n    hourlyWeatherInfos: undefined,\r\n    isLoadingDetailedData: false,\r\n};\r\n\r\nexport interface DispatchAction extends Action<ActionType> {\r\n    payload: Partial<StateInterface>;\r\n}\r\n\r\nexport enum ActionType {\r\n    UpdateUserLocation,\r\n    UpdateWeekWeatherInfos,\r\n    UpdateHourlyWeatherInfos,\r\n    SetIsLoadingDetailedData\r\n}\r\n\r\nexport const rootReducer: Reducer<StateInterface, DispatchAction> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateUserLocation:\r\n            return {\r\n                ...state,\r\n                userLocation: action.payload.userLocation,\r\n            };\r\n\r\n        case ActionType.UpdateWeekWeatherInfos:\r\n            return {\r\n                ...state,\r\n                weekWeatherInfos: action.payload.weekWeatherInfos,\r\n            };\r\n\r\n        case ActionType.UpdateHourlyWeatherInfos:\r\n            return {\r\n                ...state,\r\n                hourlyWeatherInfos: action.payload.hourlyWeatherInfos,\r\n            };\r\n\r\n        case ActionType.SetIsLoadingDetailedData:\r\n            return {\r\n                ...state,\r\n                isLoadingDetailedData: action.payload.isLoadingDetailedData,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","export default class UserLocation {\r\n    latitude: number;\r\n    longitude: number;\r\n    name?: string;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n}","import UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\n\r\nexport class LocationUtilities {\r\n    static loadUserLocationIfNeeded(userLocation: UserLocation | undefined, updateUserLocationFunction: (userLocation: UserLocation) => void): Promise<void> {\r\n        return new Promise<void>(async (resolve, _) => {           \r\n            if (userLocation !== undefined) {\r\n                resolve();\r\n                return;\r\n            }\r\n\r\n            try {\r\n                let userLocation = await LocationUtilities.loadCurrentUserLocation();\r\n                updateUserLocationFunction(userLocation);\r\n            } catch (_) {\r\n            } finally {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    static loadCurrentUserLocation(): Promise<UserLocation> {\r\n        return new Promise<UserLocation>((resolve, reject) => {\r\n            try {\r\n                if (\"geolocation\" in navigator) {\r\n                    const successCallback = ((location: GeolocationPosition) => {\r\n                        const userLocation = new UserLocation(location.coords.latitude, location.coords.longitude);\r\n                        resolve(userLocation);\r\n                    });\r\n\r\n                    const errorCallback = (() => {\r\n                        reject('Geolocation is unavailable');\r\n                    });\r\n\r\n                    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n                } else {\r\n                    reject('Geolocation is unavailable');\r\n                }\r\n            } catch (_) {\r\n                reject(`Error on get user location - ${_}`);\r\n            }\r\n        });\r\n    }\r\n}","export enum WeatherInfoEnum {\r\n    Thunderstorm,\r\n    Drizzle,\r\n    Rain,\r\n    Snow,\r\n    Atmosphere,\r\n    Clear,\r\n    Clouds,\r\n}\r\n\r\nexport class WeatherInfo {\r\n    date: Date;\r\n    wheaterInfo: WeatherInfoEnum;\r\n    wheaterInfoIcon: string;\r\n\r\n    constructor(date: Date, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        this.date = date;\r\n        this.wheaterInfo = wheaterInfo;\r\n        this.wheaterInfoIcon = wheaterInfoIcon;\r\n    }\r\n\r\n    whaterInfoText = (): string => {\r\n        switch (this.wheaterInfo) {\r\n            case WeatherInfoEnum.Thunderstorm: return 'Thunderstorm';\r\n            case WeatherInfoEnum.Drizzle: return 'Drizzle';\r\n            case WeatherInfoEnum.Rain: return 'Rain';\r\n            case WeatherInfoEnum.Snow: return 'Snow';\r\n            case WeatherInfoEnum.Atmosphere: return 'Atmosphere';\r\n            case WeatherInfoEnum.Clear: return 'Clear';\r\n            case WeatherInfoEnum.Clouds: return 'Clouds';\r\n\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n}","import { Dispatch } from \"redux\";\r\nimport UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\nimport { DailyWeatherInfo } from \"../data/model/WeatherInfo/DailyWeatherInfo\";\r\nimport { HourlyWeatherInfo } from \"../data/model/WeatherInfo/HourlyWeatherInfo\";\r\nimport { ActionType, DispatchAction } from \"./root-reducer\";\r\n\r\nexport class RootDispatcher {\r\n\r\n    private readonly dispatch: Dispatch<DispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<DispatchAction>) {\r\n        this.dispatch = dispatch;\r\n    }\r\n\r\n    updateUserLocation = (userLocation: UserLocation) => this.dispatch({\r\n        type: ActionType.UpdateUserLocation,\r\n        payload: {\r\n            userLocation\r\n        },\r\n    });\r\n\r\n    updateWeekWeatherInfos = (weekWeatherInfos: Array<DailyWeatherInfo>) => this.dispatch({\r\n        type: ActionType.UpdateWeekWeatherInfos,\r\n        payload: {\r\n            weekWeatherInfos\r\n        },\r\n    });\r\n\r\n    updateHourlyWeatherInfos = (hourlyWeatherInfos: Array<HourlyWeatherInfo>) => this.dispatch({\r\n        type: ActionType.UpdateHourlyWeatherInfos,\r\n        payload: {\r\n            hourlyWeatherInfos\r\n        },\r\n    });\r\n\r\n    setIsLoadingDetailedData = (isLoadingDetailedData: boolean) => this.dispatch({\r\n        type: ActionType.SetIsLoadingDetailedData,\r\n        payload: {\r\n            isLoadingDetailedData\r\n        },\r\n    });\r\n}","import { WeatherInfoMapInterface, WeatherInfoTemperatureMapResponseInterface } from \"../OpenWeatherResponse/OpenWeatherMapWeekResponse\";\r\nimport { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class DailyWeatherInfo extends WeatherInfo {\r\n    minTemperature: number;\r\n    maxTemperature: number;\r\n\r\n    constructor(date: Date, minTemperature: number, maxTemperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.minTemperature = minTemperature;\r\n        this.maxTemperature = maxTemperature;\r\n    }\r\n\r\n    static fromWeatherInfoMapInterface(weatherInfoMap?: WeatherInfoMapInterface): DailyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let minTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponseInterface).min;\r\n            let maxTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponseInterface).max;\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new DailyWeatherInfo(date, minTemperature, maxTemperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on converting\");\r\n        }\r\n    }\r\n}","import { WeatherInfo5Days3HoursForecastMapInterface } from \"../OpenWeatherResponse/OpenWeatherMap5Day3HoursWeatherInfoResponse\";\r\nimport { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class HourlyWeatherInfo extends WeatherInfo {\r\n    temperature: number;\r\n\r\n    constructor(date: Date, temperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    static fromWeatherInfo5Days3HoursForecastMapInterface(weatherInfo5Days3HoursForecastMapInterface?: WeatherInfo5Days3HoursForecastMapInterface): HourlyWeatherInfo {\r\n        try {\r\n            if (weatherInfo5Days3HoursForecastMapInterface === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfo5Days3HoursForecastMapInterface.dt * 1000);\r\n\r\n            let temperature: number = weatherInfo5Days3HoursForecastMapInterface.main.temp;\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfo5Days3HoursForecastMapInterface.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new HourlyWeatherInfo(date, temperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on parse\");\r\n        }\r\n    }\r\n}","interface WeatherInfo5Days3HoursForecastMainMapInterface {\r\n    temp: number,\r\n}\r\n\r\nexport interface WeatherInfoMapResponseInterface {\r\n    id: number,\r\n    main: string,\r\n    icon: string,\r\n}\r\n\r\nexport interface WeatherInfo5Days3HoursForecastMapInterface {\r\n    dt: number,\r\n    main: WeatherInfo5Days3HoursForecastMainMapInterface,\r\n    weather: Array<WeatherInfoMapResponseInterface>,\r\n}\r\n\r\ninterface WeatherInfoLocationCoordinatesMap {\r\n    lat: number,\r\n    lon: number\r\n}\r\n\r\ninterface WeatherInfoCityMapInterface {\r\n    name: string,\r\n    coord: WeatherInfoLocationCoordinatesMap,\r\n}\r\n\r\nexport default class OpenWeatherMap5Day3HoursWeatherInfoResponse {\r\n    cod: string;\r\n    list: Array<WeatherInfo5Days3HoursForecastMapInterface>;\r\n    city: WeatherInfoCityMapInterface;\r\n\r\n    constructor(cod: string, list: Array<WeatherInfo5Days3HoursForecastMapInterface>, city: WeatherInfoCityMapInterface) {\r\n        this.cod = cod;\r\n        this.list = list;\r\n        this.city = city;\r\n    }\r\n}","import { WeatherInfoMapResponseInterface } from \"./OpenWeatherMap5Day3HoursWeatherInfoResponse\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport interface WeatherInfoTemperatureMapResponseInterface {\r\n    min: number,\r\n    max: number\r\n}\r\n\r\nexport interface WeatherInfoMapInterface {\r\n    dt: number;\r\n    temp: WeatherInfoTemperatureMapResponseInterface | number;\r\n    weather: Array<WeatherInfoMapResponseInterface>;\r\n}\r\n\r\nexport class OpenWeatherMapWeekResponse extends OpenWeatherMapBasicResponse {\r\n    daily: Array<WeatherInfoMapInterface>;\r\n\r\n    constructor(dailyWeatherInfo: Array<WeatherInfoMapInterface>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.daily = dailyWeatherInfo;\r\n    }\r\n}","export class OpenWeatherMapBasicResponse {\r\n    lat: number;\r\n    lon: number;\r\n    timezone: string;\r\n    timezone_offset: number;\r\n\r\n    constructor(lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n        this.timezone = timezone;\r\n        this.timezone_offset = timezone_offset;\r\n    }\r\n}","import axios from \"axios\";\r\nimport { plainToClass } from \"class-transformer\";\r\nimport loadWeekWeatherInfoMockedData from \"../data/mock/loadWeekWeatherInfo.json\";\r\nimport load5Day3HoursWeatherForecastInfoMockedData from \"../data/mock/load5Day3HoursWeatherForecastInfo.json\";\r\nimport OpenWeatherMap5Day3HoursWeatherInfoResponse from \"../data/model/OpenWeatherResponse/OpenWeatherMap5Day3HoursWeatherInfoResponse\";\r\nimport { OpenWeatherMapWeekResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse\";\r\n\r\nexport const sleep = (milliseconds: number) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}\r\n\r\nexport async function loadWeekWeatherInfo(latitude: number, longitude: number): Promise<OpenWeatherMapWeekResponse | undefined> {\r\n    // try {\r\n    //     // TODO: Map the data from JSON to OpenWeatherMapWeekResponse\r\n    //     let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, loadWeekWeatherInfoMockedData as Object);\r\n\r\n    //     await sleep(250);\r\n\r\n    //     return openWeatherMapWeekResponse;\r\n    // } catch (_) {\r\n    //     return undefined;\r\n    // }\r\n\r\n    try {\r\n        const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n        const response = await axios.get(\r\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=minutely,hourly,alerts,current&appid=${OPEN_WHEATER_MAP_API_KEY}&units=imperial`\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, response.data as Object);\r\n            return openWeatherMapWeekResponse;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    } catch (_) {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport async function load5Days3HoursForecastWeatherInfo(latitude: number, longitude: number): Promise<OpenWeatherMap5Day3HoursWeatherInfoResponse | undefined> {\r\n    // try {\r\n    //     // TODO: Map the data from JSON to OpenWeatherMapWeekResponse\r\n    //     let openWeatherMap5Day3HoursWeatherInfoResponse: OpenWeatherMap5Day3HoursWeatherInfoResponse = plainToClass(OpenWeatherMap5Day3HoursWeatherInfoResponse, load5Day3HoursWeatherForecastInfoMockedData as Object);\r\n\r\n    //     await sleep(250);\r\n\r\n    //     return openWeatherMap5Day3HoursWeatherInfoResponse;\r\n    // } catch (_) {\r\n    //     return undefined;\r\n    // }\r\n\r\n    try {\r\n        const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n        const response = await axios.get(\r\n            `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&appid=${OPEN_WHEATER_MAP_API_KEY}&units=imperial`\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            const openWeatherMap5Day3HoursWeatherInfoResponse: OpenWeatherMap5Day3HoursWeatherInfoResponse = plainToClass(OpenWeatherMap5Day3HoursWeatherInfoResponse, response.data as Object);\r\n            return openWeatherMap5Day3HoursWeatherInfoResponse;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    } catch (_) {\r\n        return undefined;\r\n    }\r\n}","import UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\nimport { DailyWeatherInfo } from \"../data/model/WeatherInfo/DailyWeatherInfo\";\r\nimport { HourlyWeatherInfo } from \"../data/model/WeatherInfo/HourlyWeatherInfo\";\r\n\r\nimport { load5Days3HoursForecastWeatherInfo, loadWeekWeatherInfo } from \"../services/OpenWeatherMapApi\";\r\nimport { DateUtilities } from \"./dateUtils\";\r\n\r\nexport class WeatherDataUtilities {\r\n    static async fetchMyAPI(\r\n        setIsLoadingDetailedDataFunction: (isLoadingDetailedData: boolean) => void,\r\n        updateHourlyWeatherInfosFunction: (hourlyWeatherInfos: Array<HourlyWeatherInfo>) => void,\r\n        updateUserLocationFunction: (userLocation: UserLocation) => void,\r\n        updateWeekWeatherInfosFunction: (weekWeatherInfos: Array<DailyWeatherInfo>) => void,\r\n        userLocation?: UserLocation, hourlyWeatherInfos?: Array<HourlyWeatherInfo>, weekWeatherInfos?: Array<DailyWeatherInfo>,\r\n    ) {\r\n        if (userLocation !== undefined) {\r\n            // Load Hourly Data\r\n            if (hourlyWeatherInfos === undefined) {\r\n                setIsLoadingDetailedDataFunction(true);\r\n                load5Days3HoursForecastWeatherInfo(userLocation!.latitude, userLocation!.longitude).then((hourlyWeatherInfo) => {\r\n                    if (hourlyWeatherInfo !== undefined) {\r\n                        let hourWeatherInfos = hourlyWeatherInfo.list.map((hourlyWeatherInfoMap, _) => HourlyWeatherInfo.fromWeatherInfo5Days3HoursForecastMapInterface(hourlyWeatherInfoMap));\r\n                        hourWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n\r\n                        updateHourlyWeatherInfosFunction(hourWeatherInfos);\r\n                        setIsLoadingDetailedDataFunction(false);\r\n\r\n                        let userLocation = new UserLocation(hourlyWeatherInfo.city.coord.lat, hourlyWeatherInfo.city.coord.lon);\r\n                        userLocation.name = hourlyWeatherInfo.city.name;\r\n                        updateUserLocationFunction(userLocation);\r\n                    }\r\n                });\r\n            }\r\n\r\n            // Load Week data\r\n            if (weekWeatherInfos === undefined) {\r\n                const weekWeatherInfo = await loadWeekWeatherInfo(userLocation!.latitude, userLocation!.longitude);\r\n                if (weekWeatherInfo !== undefined) {\r\n                    let weekWeatherInfos = weekWeatherInfo.daily.map((weatherInfoMap, _) => DailyWeatherInfo.fromWeatherInfoMapInterface(weatherInfoMap));\r\n                    weekWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n                    weekWeatherInfos = weekWeatherInfos.filter((weatherInfo) => DateUtilities.dateIsAfterToday(weatherInfo.date));\r\n\r\n                    if (weekWeatherInfos.length > 5) {\r\n                        weekWeatherInfos = weekWeatherInfos.slice(0, 5);\r\n                    }\r\n\r\n                    updateWeekWeatherInfosFunction(weekWeatherInfos);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import { useEffect, useState } from 'react';\r\nimport { WeatherDailyInfo } from '../../components/WeatherDailyInfo';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { load5Days3HoursForecastWeatherInfo, loadWeekWeatherInfo } from '../../services/OpenWeatherMapApi';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './styles.scss';\r\nimport DefaultAppBar from '../../components/DefaultAppBar';\r\nimport { LocationUtilities } from '../../utils/locationUtils';\r\nimport UserLocation from '../../data/model/UserPreferences/UserLocation';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootDispatcher } from '../../store/root-redux';\r\nimport { HourlyWeatherInfo } from '../../data/model/WeatherInfo/HourlyWeatherInfo';\r\nimport { WeatherDataUtilities } from '../../utils/weatherDataUtilis';\r\n\r\ninterface StateInterfaceProps {\r\n    userLocation: UserLocation | undefined;\r\n    weekWeatherInfos?: Array<DailyWeatherInfo>;\r\n    hourlyWeatherInfos?: Array<HourlyWeatherInfo>;\r\n}\r\n\r\nexport function HomePage() {\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n\r\n    const { userLocation, weekWeatherInfos, hourlyWeatherInfos } = useSelector<StateInterfaceProps, StateInterfaceProps>((state: StateInterfaceProps) => {\r\n        return {\r\n            userLocation: state.userLocation,\r\n            weekWeatherInfos: state.weekWeatherInfos,\r\n            hourlyWeatherInfos: state.hourlyWeatherInfos,\r\n        }\r\n    });\r\n\r\n    const rootDispatcher = new RootDispatcher(useDispatch());\r\n\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            await WeatherDataUtilities.fetchMyAPI(\r\n                rootDispatcher.setIsLoadingDetailedData,\r\n                rootDispatcher.updateHourlyWeatherInfos,\r\n                rootDispatcher.updateUserLocation,\r\n                rootDispatcher.updateWeekWeatherInfos,\r\n                userLocation,\r\n                hourlyWeatherInfos,\r\n                weekWeatherInfos\r\n            );\r\n        }\r\n\r\n        setLoading(true);\r\n        loadData().then(\r\n            () => setLoading(false)\r\n        );\r\n\r\n    }, [userLocation]);\r\n\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            await LocationUtilities.loadUserLocationIfNeeded(\r\n                userLocation,\r\n                rootDispatcher.updateUserLocation,\r\n            );\r\n        }\r\n\r\n        setLoading(true);\r\n        loadData().then(\r\n            () => setLoading(false)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HomePageMain\">\r\n            <DefaultAppBar />\r\n\r\n            <div className=\"WeekWeatherInfo\">\r\n                {isLoading ?\r\n                    <div className=\"WeekWeatherInfoWarningAndLoading\">\r\n                        <CircularProgress />\r\n                    </div>\r\n                    : weekWeatherInfos !== undefined ?\r\n                        weekWeatherInfos.map((dayWeatherInfo, _) =>\r\n                            <WeatherDailyInfo weatherDailyInfo={dayWeatherInfo} />\r\n                        ) :\r\n                        <div className=\"WeekWeatherInfoWarningAndLoading\">\r\n                            Location is unavailable\r\n                        </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import { useMemo, useCallback } from 'react';\r\nimport { HourlyWeatherInfo } from '../../data/model/WeatherInfo/HourlyWeatherInfo';\r\nimport { scaleTime, scaleLinear } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { Group } from '@vx/group';\r\nimport { AreaClosed, Bar, Line } from '@vx/shape';\r\nimport { localPoint } from '@visx/event';\r\nimport { LinearGradient } from '@vx/gradient';\r\nimport { bisector, extent, max, mean, min } from 'd3-array';\r\nimport { withTooltip, Tooltip, TooltipWithBounds, defaultStyles } from '@visx/tooltip';\r\nimport { WithTooltipProvidedProps } from '@visx/tooltip/lib/enhancers/withTooltip';\r\n\r\ntype TooltipData = HourlyWeatherInfo;\r\n\r\nexport type AreaProps = {\r\n    width: number;\r\n    height: number;\r\n    margin?: { top: number; right: number; bottom: number; left: number };\r\n    weatherDailyInfo: Array<HourlyWeatherInfo>;\r\n    chartScale: ChartScale;\r\n};\r\n\r\nexport interface ChartScale {\r\n    min: number;\r\n    max: number;\r\n}\r\n\r\nexport default withTooltip<AreaProps, TooltipData>(\r\n    ({\r\n        width,\r\n        height,\r\n        margin = { top: 0, right: 0, bottom: 0, left: 0 },\r\n        showTooltip,\r\n        hideTooltip,\r\n        tooltipData,\r\n        tooltipTop = 0,\r\n        tooltipLeft = 0,\r\n        weatherDailyInfo,\r\n        chartScale,\r\n    }: AreaProps & WithTooltipProvidedProps<TooltipData>) => {\r\n        // Bounds\r\n        const innerWidth = width - margin.left - margin.right;\r\n        const innerHeight = height - margin.top - margin.bottom;\r\n\r\n        // Accessors\r\n        const getDate = (d: HourlyWeatherInfo): Date => d.date;\r\n        const getTemperatureValue = (d: HourlyWeatherInfo): number => d.temperature;\r\n        const getWeatherValue = (d: HourlyWeatherInfo): string => d.whaterInfoText();\r\n\r\n        const bisectDate = bisector<HourlyWeatherInfo, Date>(d => new Date(d.date)).left;\r\n\r\n        // Scales\r\n        const yMin = chartScale.min;\r\n        const yMax = chartScale.max;\r\n\r\n        const xDateValues = useMemo(\r\n            () =>\r\n                scaleTime({\r\n                    range: [margin.left, innerWidth + margin.left],\r\n                    domain: extent(weatherDailyInfo, getDate) as [Date, Date],\r\n                }),\r\n            [innerWidth, margin.left],\r\n        );\r\n        const yTemperatureValues = useMemo(\r\n            () =>\r\n                scaleLinear({\r\n                    range: [innerHeight + margin.top, margin.top],\r\n                    domain: [yMin, yMax],\r\n                    nice: true,\r\n                }),\r\n            [margin.top, innerHeight],\r\n        );\r\n\r\n        // Styles\r\n        const mainColor = '#3f51b5';\r\n\r\n        const tooltipStyles = {\r\n            ...defaultStyles,\r\n            background: mainColor,\r\n            border: '1px solid white',\r\n            color: 'white',\r\n        };\r\n\r\n        // Tooltip handler\r\n        const handleTooltip = useCallback(\r\n            (event: React.TouchEvent<SVGRectElement> | React.MouseEvent<SVGRectElement>) => {\r\n                const { x } = localPoint(event) || { x: 0 };\r\n                const x0 = xDateValues.invert(x);\r\n                const index = bisectDate(weatherDailyInfo, x0, 1);\r\n                const d0 = weatherDailyInfo[index - 1];\r\n                const d1 = weatherDailyInfo[index];\r\n                let d = d0;\r\n                if (d1 && getDate(d1)) {\r\n                    d = x0.valueOf() - getDate(d0).valueOf() > getDate(d1).valueOf() - x0.valueOf() ? d1 : d0;\r\n                }\r\n                showTooltip({\r\n                    tooltipData: d,\r\n                    tooltipLeft: x,\r\n                    tooltipTop: yTemperatureValues(getTemperatureValue(d)),\r\n                });\r\n            },\r\n            [showTooltip, yTemperatureValues, xDateValues],\r\n        );\r\n\r\n        return (\r\n            <div className=\"WeatherHourlyChartMain\">\r\n                <svg width={width} height={height}>\r\n                    <rect\r\n                        x={margin.left}\r\n                        y={margin.top}\r\n                        width={innerWidth}\r\n                        height={innerHeight}\r\n                        fill=\"url(#area-background-gradient)\"\r\n                        rx={14}\r\n                    />\r\n                    <LinearGradient id=\"area-background-gradient\" from=\"#f3f3f3\" to=\"#e2e2e2\" vertical />\r\n                    <LinearGradient\r\n                        from='#FF8F00'\r\n                        to='#FFE082'\r\n                        id='gradient'\r\n                        vertical={false}\r\n                    />\r\n                    <Group top={0} left={0}>\r\n                        <AreaClosed<HourlyWeatherInfo>\r\n                            data={weatherDailyInfo}\r\n                            x={d => xDateValues(getDate(d)) ?? 0}\r\n                            y={d => yTemperatureValues(getTemperatureValue(d)) ?? 0}\r\n                            yScale={yTemperatureValues}\r\n                            fill=\"url(#gradient)\"\r\n                        />\r\n\r\n                        <Bar\r\n                            x={margin.left}\r\n                            y={margin.top}\r\n                            width={innerWidth}\r\n                            height={innerHeight}\r\n                            fill=\"transparent\"\r\n                            rx={14}\r\n                            onTouchStart={handleTooltip}\r\n                            onTouchMove={handleTooltip}\r\n                            onMouseMove={handleTooltip}\r\n                            onMouseLeave={() => hideTooltip()}\r\n                        />\r\n\r\n                        <AxisLeft\r\n                            scale={yTemperatureValues}\r\n                            top={0}\r\n                            left={margin.left}\r\n                            label={'Temperature (Fº)'}\r\n                            stroke={'#1b1a1e'}\r\n                        />\r\n\r\n                        <AxisBottom\r\n                            scale={xDateValues}\r\n                            top={innerHeight + margin.top}\r\n                            label={'Hour'}\r\n                            stroke={'#1b1a1e'}\r\n                        />\r\n                        {tooltipData && (\r\n                            <g>\r\n                                <Line\r\n                                    from={{ x: tooltipLeft, y: margin.top }}\r\n                                    to={{ x: tooltipLeft, y: innerHeight + margin.top }}\r\n                                    stroke={mainColor}\r\n                                    strokeWidth={2}\r\n                                    pointerEvents=\"none\"\r\n                                    strokeDasharray=\"5,2\"\r\n                                />\r\n                                <circle\r\n                                    cx={tooltipLeft}\r\n                                    cy={tooltipTop + 1}\r\n                                    r={4}\r\n                                    fill=\"black\"\r\n                                    fillOpacity={0.1}\r\n                                    stroke=\"black\"\r\n                                    strokeOpacity={0.1}\r\n                                    strokeWidth={2}\r\n                                    pointerEvents=\"none\"\r\n                                />\r\n                                <circle\r\n                                    cx={tooltipLeft}\r\n                                    cy={tooltipTop}\r\n                                    r={4}\r\n                                    fill={mainColor}\r\n                                    stroke=\"white\"\r\n                                    strokeWidth={2}\r\n                                    pointerEvents=\"none\"\r\n                                />\r\n                            </g>\r\n                        )}\r\n                    </Group>\r\n                </svg>\r\n                {tooltipData && (\r\n                    <div>\r\n                        <TooltipWithBounds\r\n                            key={Math.random()}\r\n                            top={tooltipTop - 12}\r\n                            left={tooltipLeft + 12}\r\n                            style={tooltipStyles}\r\n                        >\r\n                            {`${getTemperatureValue(tooltipData)} Fº`} <br/>\r\n                            {`${getWeatherValue(tooltipData)}`}\r\n                        </TooltipWithBounds>\r\n                        <Tooltip\r\n                            top={innerHeight + margin.top - 14}\r\n                            left={tooltipLeft}\r\n                            style={{\r\n                                ...defaultStyles,\r\n                                minWidth: 72,\r\n                                textAlign: 'center',\r\n                                transform: 'translateX(-50%)',\r\n                            }}\r\n                        >\r\n                            {(getDate(tooltipData).toLocaleTimeString())}\r\n                        </Tooltip>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    },\r\n);\r\n","import { HourlyWeatherInfo } from '../../data/model/WeatherInfo/HourlyWeatherInfo';\r\nimport useWindowDimensions from '../../hook/useWindowDimensionsHook';\r\nimport WeatherHourlyChartComponent, { ChartScale } from './WeatherHourlyChartComponent';\r\n\r\ntype WeatherHourlyInfoProps = {\r\n  weatherDailyInfo: Array<HourlyWeatherInfo>\r\n  chartScale: ChartScale\r\n}\r\n\r\nexport type AreaProps = {\r\n  width: number;\r\n  height: number;\r\n  margin?: { top: number; right: number; bottom: number; left: number };\r\n};\r\n\r\n\r\nexport const WeatherHourlyChart = ({ weatherDailyInfo, chartScale }: WeatherHourlyInfoProps) => {\r\n  const { width } = useWindowDimensions();\r\n\r\n  // Dimensions\r\n  const margin = {\r\n    top: 30,\r\n    left: 60,\r\n    right: 40,\r\n    bottom: 80,\r\n  };\r\n\r\n  const chartWidth = width * 0.8;\r\n  const chartHeight = 360 + margin.top + margin.bottom;\r\n\r\n  return (\r\n    <WeatherHourlyChartComponent\r\n      weatherDailyInfo={weatherDailyInfo}\r\n      height={chartHeight}\r\n      width={chartWidth}\r\n      margin={margin}\r\n      chartScale={chartScale}\r\n    />\r\n  );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { WeatherHourlyChart } from \"../../components/WeatherHourlyChart\";\r\nimport { HourlyWeatherInfo } from \"../../data/model/WeatherInfo/HourlyWeatherInfo\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './styles.scss';\r\nimport { Link, useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport DefaultAppBar from \"../../components/DefaultAppBar\";\r\nimport { DateUtilities } from \"../../utils/dateUtils\";\r\nimport { LocationUtilities } from \"../../utils/locationUtils\";\r\nimport UserLocation from \"../../data/model/UserPreferences/UserLocation\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootDispatcher } from \"../../store/root-redux\";\r\nimport { WeatherDataUtilities } from \"../../utils/weatherDataUtilis\";\r\nimport { DailyWeatherInfo } from \"../../data/model/WeatherInfo/DailyWeatherInfo\";\r\nimport { ButtonGroup, Button } from \"@material-ui/core\";\r\nimport { mean, min, max } from \"d3-array\";\r\nimport { ChartScale } from \"../../components/WeatherHourlyChart/WeatherHourlyChartComponent\";\r\n\r\ninterface StateInterfaceProps {\r\n    userLocation: UserLocation | undefined;\r\n    hourlyWeatherInfos: Array<HourlyWeatherInfo> | undefined;\r\n    isLoadingDetailedData?: boolean;\r\n    weekWeatherInfos?: Array<DailyWeatherInfo>;\r\n}\r\n\r\nexport default function HourlyWeatherInfoPage() {\r\n    const [localHourlyWeatherInfos, setLocalHourlyWeatherInfos] = useState<Array<HourlyWeatherInfo> | undefined>(undefined);\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [dateAccordingToCurrentWeekDayName, setDateAccordingToCurrentWeekDayName] = useState<Date | undefined>(undefined);\r\n    const [chartScale, setChartScale] = useState<ChartScale>({min: 0, max: 0});\r\n\r\n    const history = useHistory();\r\n\r\n    const { userLocation, hourlyWeatherInfos, isLoadingDetailedData, weekWeatherInfos } = useSelector<StateInterfaceProps, StateInterfaceProps>((state: StateInterfaceProps) => {\r\n        return {\r\n            userLocation: state.userLocation,\r\n            hourlyWeatherInfos: state.hourlyWeatherInfos,\r\n            isLoadingDetailedData: state.isLoadingDetailedData,\r\n            weekWeatherInfos: state.weekWeatherInfos,\r\n        }\r\n    });\r\n\r\n    const rootDispatcher = new RootDispatcher(useDispatch());\r\n\r\n    const { path } = useRouteMatch();\r\n\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            await WeatherDataUtilities.fetchMyAPI(\r\n                rootDispatcher.setIsLoadingDetailedData,\r\n                rootDispatcher.updateHourlyWeatherInfos,\r\n                rootDispatcher.updateUserLocation,\r\n                rootDispatcher.updateWeekWeatherInfos,\r\n                userLocation,\r\n                hourlyWeatherInfos,\r\n                weekWeatherInfos\r\n            );\r\n        }\r\n\r\n        loadData();\r\n\r\n    }, [userLocation]);\r\n\r\n    useEffect(() => {\r\n        const dateAccordingToCurrentWeekDayName = DateUtilities.getDateAccordingToCurrentWeekDayName(path);\r\n        setDateAccordingToCurrentWeekDayName(dateAccordingToCurrentWeekDayName);\r\n\r\n        if (hourlyWeatherInfos !== undefined && dateAccordingToCurrentWeekDayName !== undefined) {\r\n            const date: number = dateAccordingToCurrentWeekDayName.getDate();\r\n            const localHourlyWeatherInfos = hourlyWeatherInfos.filter((hourly) => hourly.date.getDate() === date);\r\n\r\n            // Scales\r\n            const getTemperatureValue = (d: HourlyWeatherInfo): number => d.temperature;\r\n\r\n            const yMean = (mean(hourlyWeatherInfos, getTemperatureValue) || 0);\r\n            const yMin = (min(hourlyWeatherInfos, getTemperatureValue) || 0) - yMean / 10;\r\n            const yMax = (max(hourlyWeatherInfos, getTemperatureValue) || 0) + yMean / 10;\r\n            setChartScale({\r\n                min: yMin,\r\n                max: yMax\r\n            });\r\n\r\n            setLocalHourlyWeatherInfos(localHourlyWeatherInfos);\r\n        }\r\n    }, [hourlyWeatherInfos, path]);\r\n\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            await LocationUtilities.loadUserLocationIfNeeded(\r\n                userLocation,\r\n                rootDispatcher.updateUserLocation,\r\n            );\r\n        }\r\n\r\n        setLoading(true);\r\n        loadData().then(\r\n            () => setLoading(false)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HourlyWeatherInfoMain\">\r\n            <DefaultAppBar />\r\n\r\n            <div className=\"HourlyWeatherInfoChart\">\r\n                <div className=\"HourlyWeatherInfoChartHeader\">\r\n                    <div className=\"HourlyWeatherInfoChartHeaderText\">\r\n                        {dateAccordingToCurrentWeekDayName &&\r\n                            dateAccordingToCurrentWeekDayName!.toDateString()\r\n                        }\r\n                    </div>\r\n\r\n                    {weekWeatherInfos && dateAccordingToCurrentWeekDayName &&\r\n                        <ButtonGroup className=\"HourlyWeatherInfoChartHeaderTextButtonGroup\">\r\n                            {weekWeatherInfos.map((dayWeatherInfo) => {\r\n                                const weekDay = DateUtilities.days[dayWeatherInfo.date.getDay()];\r\n\r\n                                const isSelected = dateAccordingToCurrentWeekDayName!.getDay() === dayWeatherInfo.date.getDay();\r\n\r\n                                return (\r\n                                    <Button\r\n                                        onClick={() => {\r\n                                            history.push(`/${weekDay}`);\r\n                                        }}\r\n                                        className={isSelected ? 'HourlyWeatherInfoChartHeaderTextButtonSelected' : ''}>\r\n                                        {weekDay}\r\n                                    </Button>\r\n                                );\r\n                            })}\r\n                        </ButtonGroup>\r\n                    }\r\n                </div>\r\n\r\n                {isLoadingDetailedData || isLoading ?\r\n                    <div className=\"HourlyWeatherInfoChartWarningAndLoading\">\r\n                        <CircularProgress />\r\n                    </div>\r\n                    : userLocation === undefined ?\r\n                        <div className=\"HourlyWeatherInfoChartWarningAndLoading\">\r\n                            Location is unavailable\r\n                        </div>\r\n                        : localHourlyWeatherInfos !== undefined && localHourlyWeatherInfos.length > 0 ?\r\n                            <WeatherHourlyChart\r\n                                key={localHourlyWeatherInfos[0].date.toString()}\r\n                                weatherDailyInfo={localHourlyWeatherInfos}\r\n                                chartScale={chartScale}/>\r\n                            :\r\n                            <div className=\"HourlyWeatherInfoChartWarningAndLoading\">\r\n                                Data is unavailable\r\n                            </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { DispatchAction, StateInterface, rootReducer } from \"./root-reducer\";\r\nimport { createStore } from \"redux\";\r\n\r\nexport const store = createStore<StateInterface, DispatchAction, null, null>(rootReducer);","import { Provider } from \"react-redux\";\r\nimport { Switch, Route, BrowserRouter, HashRouter } from \"react-router-dom\";\r\nimport { HomePage } from \"./pages/HomePage\";\r\nimport HourlyWeatherInfoPage from \"./pages/HourlyWeatherInfo\";\r\nimport { store } from \"./store\";\r\nimport { DateUtilities } from \"./utils/dateUtils\";\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route path={\r\n                        [\r\n                            ...[\"/tomorrow\"],\r\n                            ...DateUtilities.days.map((day, _, __) => `/${day}`)\r\n                        ]}\r\n                        component={HourlyWeatherInfoPage}\r\n                    />\r\n                    <Route path=\"/\" component={HomePage} />\r\n                </Switch>\r\n            </HashRouter>\r\n        </Provider>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Routes from './Routes';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Routes />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}