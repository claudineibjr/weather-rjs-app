{"version":3,"sources":["utils/utils.ts","data/model/WeatherInfo/WeatherInfo.ts","components/WeatherDailyInfo/index.tsx","data/model/WeatherInfo/DailyWeatherInfo.ts","data/model/WeatherInfo/HourlyWeatherInfo.ts","data/model/WeatherInfo/response/WeatherInfoMap.ts","data/model/OpenWeatherResponse/OpenWeatherMapBasicResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapDayResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse.ts","data/model/OpenWeatherResponse/OpenWeatherMapGeocodingResponse.ts","services/OpenWeatherMapApi.ts","components/DefaultAppBar/index.tsx","store/root-reducer.ts","data/model/UserPreferences/UserLocation.ts","utils/locationUtils.ts","data/model/UserPreferences/UserPreferences.ts","store/root-redux.ts","pages/HomePage/index.tsx","components/WeatherHourlyChart/index.tsx","pages/HourlyWeatherInfo/index.tsx","store/index.ts","Routes.tsx","index.tsx"],"names":["DateUtilities","shortDays","days","map","dayName","substring","getDateAccordingToCurrentWeekDayName","replace","dayNameIndex","indexOf","dateAccordingToRelativeDay","getDateAccordingToRelativeDay","Error","date","Date","now","differenceDays","getDay","setDate","getDate","relativeDayName","toLowerCase","WeatherInfoEnum","WeatherDailyInfo","weatherDailyInfo","to","className","alt","src","wheaterInfoIcon","maxTemperature","minTemperature","WeatherInfo","wheaterInfo","this","DailyWeatherInfo","HourlyWeatherInfo","temperature","WeatherInfoMap","dt","temp","weather","weatherInfoMap","undefined","weatherInfoIcon","min","max","weatherInfoEnum","Clear","weatherInfo","icon","id","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clouds","_","OpenWeatherMapBasicResponse","lat","lon","timezone","timezone_offset","OpenWeatherMapDayResponse","hourly","OpenWeatherMapWeekResponse","dailyWeatherInfo","daily","OpenWeatherMapGeocodingResponse","name","country","sleep","milliseconds","Promise","resolve","setTimeout","loadWeekWeatherInfo","a","openWeatherMapWeekResponse","plainToClass","loadWeekWeatherInfoMockedData","process","loadDayWeatherInfo","openWeatherMapDayResponse","loadDayWeatherInfoMockedData","loadGeocodingInfo","latitude","longitude","axios","get","response","status","openWeatherMapGeocodingResponse","data","length","DefaultAppBar","userLocation","useSelector","state","AppBar","position","Toolbar","Typography","variant","toDateString","ActionType","UserLocation","oldTraffordStadiumLocation","LocationUtilities","updateUserLocationFunction","loadCurrentUserLocation","then","userLocationFromResponse","reject","navigator","geolocation","getCurrentPosition","location","coords","UserPreferences","initialState","userPreferences","RootDispatcher","dispatch","updateUserPreferences","type","UpdateUserPreferences","payload","updateUserLocation","UpdateUserLocation","HomePage","useState","weekWeatherInfos","setWeekWeatherInfos","isLoading","setLoading","rootDispatcher","useDispatch","useEffect","weekWeatherInfo","toDailyWeatherInfo","sort","weatherInfoA","weatherInfoB","getTime","slice","all","loadUserLocationIfNeeded","fetchMyAPI","CircularProgress","dayWeatherInfo","WeatherHourlyChart","margin","width","height","innerWidth","innerHeight","d","getTemperatureValue","xDateValues","useMemo","scaleTime","range","domain","extent","yMin","yMax","yTemperatureValues","scaleLinear","nice","x","y","fill","rx","LinearGradient","from","vertical","Group","top","left","AreaClosed","yScale","AxisLeft","scale","label","stroke","AxisBottom","HourlyWeatherInfoPage","dayWeatherInfos","setDayWeatherInfos","useRouteMatch","path","toHourlyWeatherInfo","firstOfDay","filter","hourlyWeatherInfo","getHours","indexOfFirstOfDay","store","createStore","action","Routes","basename","day","__","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9099881a.chunk.js","sourcesContent":["export class DateUtilities {\r\n    static readonly days: Array<String> = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    static readonly shortDays: Array<String> = DateUtilities.days.map((dayName) => dayName.substring(0, 3));\r\n\r\n    static getDateAccordingToCurrentWeekDayName = (dayName: string): Date => {\r\n        dayName = dayName.replace('/', '');\r\n\r\n        const dayNameIndex = DateUtilities.days.indexOf(dayName);\r\n        if (dayNameIndex === -1) {\r\n            const dateAccordingToRelativeDay = DateUtilities.getDateAccordingToRelativeDay(dayName);\r\n            if (dateAccordingToRelativeDay !== null) {\r\n                throw new Error(`Date invalid - ${dayName}`);\r\n            }\r\n            return dateAccordingToRelativeDay!;\r\n        }\r\n\r\n        const date = new Date(Date.now());\r\n        const dayNameNowIndex = date.getDay();\r\n\r\n        let differenceDays = dayNameIndex - dayNameNowIndex;\r\n        if (differenceDays < 0) {\r\n            differenceDays = differenceDays * -1;\r\n        }\r\n        date.setDate(date.getDate() + differenceDays);\r\n\r\n        return date;\r\n    }\r\n\r\n    private static getDateAccordingToRelativeDay = (relativeDayName: string): Date | null => {\r\n        const date = new Date(Date.now());\r\n\r\n        switch (relativeDayName.toLowerCase()) {\r\n            case 'today':\r\n                return date;\r\n\r\n            case 'yesterday':\r\n                date.setDate(date.getDate() - 1);\r\n                return date;\r\n\r\n            case 'tomorrow':\r\n                date.setDate(date.getDate() + 1);\r\n                return date;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}","export enum WeatherInfoEnum {\r\n    Thunderstorm,\r\n    Drizzle,\r\n    Rain,\r\n    Snow,\r\n    Atmosphere,\r\n    Clear,\r\n    Clouds,\r\n}\r\n\r\nexport class WeatherInfo {\r\n    date: Date;\r\n    wheaterInfo: WeatherInfoEnum;\r\n    wheaterInfoIcon: string;\r\n\r\n    constructor(date: Date, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        this.date = date;\r\n        this.wheaterInfo = wheaterInfo;\r\n        this.wheaterInfoIcon = wheaterInfoIcon;\r\n    }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { DateUtilities } from '../../utils/utils';\r\nimport './styles.scss';\r\n\r\ntype WeatherDailyInfoProps = {\r\n  weatherDailyInfo: DailyWeatherInfo\r\n}\r\n\r\nexport const WeatherDailyInfo = ({ weatherDailyInfo }: WeatherDailyInfoProps) => {\r\n  return (\r\n    <Link\r\n      to={`/${DateUtilities.days[weatherDailyInfo.date.getDay()]}`}\r\n      className=\"DefaultAnchor\">\r\n      <div className=\"WeatherDailyInfoMain\">\r\n        <div className=\"DayName\">\r\n          {DateUtilities.shortDays[weatherDailyInfo.date.getDay()]}\r\n        </div>\r\n\r\n        <img className=\"WeatherIcon\"\r\n          alt=\"WeatherIcon\"\r\n          src={weatherDailyInfo.wheaterInfoIcon} />\r\n\r\n        <div className=\"Temperatures\">\r\n          <div className=\"MaxTemperature\">\r\n            {weatherDailyInfo.maxTemperature | 0}º\r\n          </div>\r\n          <div className=\"MinTemperature\">\r\n            {weatherDailyInfo.minTemperature | 0}º\r\n          </div>\r\n        </div >\r\n      </div>\r\n    </Link>\r\n  );\r\n}","import { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class DailyWeatherInfo extends WeatherInfo {\r\n    minTemperature: number;\r\n    maxTemperature: number;\r\n\r\n    constructor(date: Date, minTemperature: number, maxTemperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.minTemperature = minTemperature;\r\n        this.maxTemperature = maxTemperature;\r\n    }\r\n}","import { WeatherInfo, WeatherInfoEnum } from \"./WeatherInfo\";\r\n\r\nexport class HourlyWeatherInfo extends WeatherInfo {\r\n    temperature: number;\r\n\r\n    constructor(date: Date, temperature: number, wheaterInfo: WeatherInfoEnum, wheaterInfoIcon: string) {\r\n        super(date, wheaterInfo, wheaterInfoIcon);\r\n        this.temperature = temperature;\r\n    }\r\n}","import { DailyWeatherInfo } from \"../DailyWeatherInfo\";\r\nimport { HourlyWeatherInfo } from \"../HourlyWeatherInfo\";\r\nimport { WeatherInfoEnum } from \"../WeatherInfo\";\r\nimport { WeatherInfoMapResponse } from \"./WeatherInfoMapResponse\";\r\nimport { WeatherInfoTemperatureMapResponse } from \"./WeatherInfoTemperature\";\r\n\r\nexport class WeatherInfoMap {\r\n    dt: number;\r\n    temp: WeatherInfoTemperatureMapResponse | number;\r\n    // temp: WeatherInfoTemperatureMapResponse;\r\n    weather: Array<WeatherInfoMapResponse>;\r\n\r\n    constructor(dt: number, temp: WeatherInfoTemperatureMapResponse | number, temperature: number, weather: Array<WeatherInfoMapResponse>) {\r\n        this.dt = dt;\r\n        this.temp = temp;\r\n        this.weather = weather;\r\n    }\r\n\r\n    static toDailyWeatherInfo(weatherInfoMap?: WeatherInfoMap): DailyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let minTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponse).min;\r\n            let maxTemperature: number = (weatherInfoMap.temp as WeatherInfoTemperatureMapResponse).max;\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new DailyWeatherInfo(date, minTemperature, maxTemperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on converting\");\r\n        }\r\n    }\r\n\r\n    static toHourlyWeatherInfo(weatherInfoMap?: WeatherInfoMap): HourlyWeatherInfo {\r\n        try {\r\n            if (weatherInfoMap === undefined) {\r\n                throw new Error(\"weatherInfoMap == undefined\");\r\n            }\r\n\r\n            const date = new Date(weatherInfoMap.dt * 1000);\r\n\r\n            let temperature: number = (weatherInfoMap.temp as number);\r\n\r\n            let weatherInfoEnum: WeatherInfoEnum = WeatherInfoEnum.Clear;\r\n            let weatherInfoIcon: string = '';\r\n\r\n            const weatherInfo = weatherInfoMap.weather[0];\r\n            weatherInfoIcon = `http://openweathermap.org/img/wn/${weatherInfo.icon}@2x.png`;\r\n\r\n            // Get the group of weather conditions\r\n            switch ((weatherInfo.id / 100) | 0) {\r\n                case 2: weatherInfoEnum = WeatherInfoEnum.Thunderstorm; break;\r\n                case 3: weatherInfoEnum = WeatherInfoEnum.Drizzle; break;\r\n                case 5: weatherInfoEnum = WeatherInfoEnum.Rain; break;\r\n                case 6: weatherInfoEnum = WeatherInfoEnum.Snow; break;\r\n                case 7: weatherInfoEnum = WeatherInfoEnum.Atmosphere; break;\r\n                case 8:\r\n                    if (weatherInfo.id === 800) {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clear;\r\n                    } else {\r\n                        weatherInfoEnum = WeatherInfoEnum.Clouds;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            return new HourlyWeatherInfo(date, temperature, weatherInfoEnum, weatherInfoIcon);\r\n        } catch (_) {\r\n            throw new Error(\"Error on parse\");\r\n        }\r\n    }    \r\n}","export class OpenWeatherMapBasicResponse {\r\n    lat: number;\r\n    lon: number;\r\n    timezone: string;\r\n    timezone_offset: number;\r\n\r\n    constructor(lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n        this.timezone = timezone;\r\n        this.timezone_offset = timezone_offset;\r\n    }\r\n}","import { WeatherInfoMap } from \"../WeatherInfo/response/WeatherInfoMap\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport class OpenWeatherMapDayResponse extends OpenWeatherMapBasicResponse {\r\n    hourly: Array<WeatherInfoMap>;\r\n\r\n    constructor(hourly: Array<WeatherInfoMap>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.hourly = hourly;\r\n    }\r\n}","import { WeatherInfoMap } from \"../WeatherInfo/response/WeatherInfoMap\";\r\nimport { OpenWeatherMapBasicResponse } from \"./OpenWeatherMapBasicResponse\";\r\n\r\nexport class OpenWeatherMapWeekResponse extends OpenWeatherMapBasicResponse {\r\n    daily: Array<WeatherInfoMap>;\r\n\r\n    constructor(dailyWeatherInfo: Array<WeatherInfoMap>, lat: number, lon: number, timezone: string, timezone_offset: number) {\r\n        super(lat, lon, timezone, timezone_offset);\r\n        this.daily = dailyWeatherInfo;\r\n    }\r\n}","export class OpenWeatherMapGeocodingResponse {\r\n    name: string;\r\n    country: string;\r\n    lat: number;\r\n    lon: number;\r\n\r\n    constructor(name: string, country: string, lat: number, lon: number) {\r\n        this.name = name;\r\n        this.country = country;\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n    }\r\n}","import axios from \"axios\";\r\nimport { plainToClass } from \"class-transformer\";\r\nimport loadWeekWeatherInfoMockedData from \"../data/mock/loadWeekWeatherInfo.json\";\r\nimport loadDayWeatherInfoMockedData from \"../data/mock/loadDayWeatherInfo.json\";\r\nimport loadGeocodingInfoMockedData from \"../data/mock/loadGeocodingInfo.json\";\r\nimport { OpenWeatherMapDayResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapDayResponse\";\r\nimport { OpenWeatherMapWeekResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapWeekResponse\";\r\nimport { OpenWeatherMapGeocodingResponse } from \"../data/model/OpenWeatherResponse/OpenWeatherMapGeocodingResponse\";\r\n\r\nconst sleep = (milliseconds: number) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}\r\n\r\nexport async function loadWeekWeatherInfo(): Promise<OpenWeatherMapWeekResponse | undefined> {\r\n    // TODO: Map the data from JSON to OpenWeatherMapWeekResponse\r\n    let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, loadWeekWeatherInfoMockedData as Object);\r\n\r\n    await sleep(250);\r\n\r\n    const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n\r\n    return openWeatherMapWeekResponse;\r\n\r\n    // try {\r\n    //     const response = await axios.get(\r\n    //         'https://api.openweathermap.org/data/2.5/onecall?lat=-21.9956977&lon=-47.9515105&exclude=minutely,hourly,alerts,current&appid=5bf4009a1c9ac711a96acf649074854f&units=imperial'\r\n    //     );\r\n\r\n    //     if (response.status === 200) {\r\n    //         let openWeatherMapWeekResponse: OpenWeatherMapWeekResponse = plainToClass(OpenWeatherMapWeekResponse, response.data as Object);\r\n    //         return openWeatherMapWeekResponse;\r\n    //     } else {\r\n    //         return undefined;\r\n    //     }\r\n    // } catch (_) {\r\n    //     return undefined;\r\n    // }\r\n}\r\n\r\nexport async function loadDayWeatherInfo(): Promise<OpenWeatherMapDayResponse | undefined> {\r\n    // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    let openWeatherMapDayResponse: OpenWeatherMapDayResponse = plainToClass(OpenWeatherMapDayResponse, loadDayWeatherInfoMockedData as Object);\r\n\r\n    await sleep(250);\r\n\r\n    const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n\r\n    // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    return openWeatherMapDayResponse;\r\n\r\n    // try {\r\n    //     const response = await axios.get(\r\n    //         'https://api.openweathermap.org/data/2.5/onecall?lat=-21.9956977&lon=-47.9515105&exclude=minutely,alerts,current,daily&appid=5bf4009a1c9ac711a96acf649074854f&units=imperial'\r\n    //     );\r\n\r\n    //     if (response.status === 200) {\r\n    //         let openWeatherMapWeekResponse: OpenWeatherMapDayResponse = plainToClass(OpenWeatherMapDayResponse, response.data as Object);\r\n    //         return openWeatherMapWeekResponse;\r\n    //     } else {\r\n    //         return undefined;\r\n    //     }\r\n    // } catch (_) {\r\n    //     return undefined;\r\n    // }\r\n}\r\n\r\nexport async function loadGeocodingInfo(latitude: number, longitude: number): Promise<OpenWeatherMapGeocodingResponse | undefined> {\r\n    // // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    // let openWeatherMapGeocodingResponse: Array<OpenWeatherMapGeocodingResponse> = plainToClass(OpenWeatherMapGeocodingResponse, loadGeocodingInfoMockedData as Object[]);\r\n\r\n    // await sleep(250);\r\n\r\n    // const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n\r\n    // // TODO: Map the data from JSON to OpenWeatherMapDayResponse\r\n    // if (openWeatherMapGeocodingResponse.length > 0) {\r\n    //     return openWeatherMapGeocodingResponse[0];\r\n    // } else {\r\n    //     return undefined;\r\n    // }\r\n\r\n    try {\r\n        const OPEN_WHEATER_MAP_API_KEY = process.env.REACT_APP_OPEN_WHEATER_MAP_API_KEY;\r\n\r\n        const response = await axios.get(\r\n            `http://api.openweathermap.org/geo/1.0/reverse?lat=${latitude}&lon=${longitude}&appid=${OPEN_WHEATER_MAP_API_KEY}`\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            let openWeatherMapGeocodingResponse: Array<OpenWeatherMapGeocodingResponse> = plainToClass(OpenWeatherMapGeocodingResponse, response.data as Object[]);\r\n            if (openWeatherMapGeocodingResponse.length > 0) {\r\n                return openWeatherMapGeocodingResponse[0];\r\n            } else {\r\n                return undefined;\r\n            }\r\n        } else {\r\n            return undefined;\r\n        }\r\n    } catch (_) {\r\n        return undefined;\r\n    }\r\n}","import AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport './styles.scss';\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from 'react-redux';\r\nimport UserLocation from '../../data/model/UserPreferences/UserLocation';\r\n\r\ninterface StateInterfaceProps {\r\n    userLocation: UserLocation | undefined;\r\n}\r\n\r\nexport default function DefaultAppBar() {\r\n    const { userLocation } = useSelector<StateInterfaceProps, StateInterfaceProps>((state: StateInterfaceProps) => {\r\n        return {\r\n            userLocation: state.userLocation,\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar className=\"DefaultAppBarMain\">\r\n                <Link to=\"/\" className=\"DefaultAnchor\">\r\n                    <Typography variant=\"h4\">\r\n                        Weather Info\r\n                    </Typography>\r\n                </Link>\r\n                <div>\r\n                    <Typography variant=\"h6\">\r\n                        {new Date(Date.now()).toDateString()}\r\n                    </Typography>\r\n                    {userLocation &&\r\n                        userLocation.name\r\n                    }\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}","import { Action, Reducer } from \"redux\";\r\nimport UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\nimport UserPreferences from \"../data/model/UserPreferences/UserPreferences\";\r\n\r\nexport interface StateInterface {\r\n    userPreferences: UserPreferences | undefined;\r\n    userLocation: UserLocation | undefined;\r\n}\r\n\r\nconst initialState: StateInterface = {\r\n    userPreferences: undefined,\r\n    userLocation: undefined,\r\n};\r\n\r\nexport interface DispatchAction extends Action<ActionType> {\r\n    payload: Partial<StateInterface>;\r\n}\r\n\r\nexport enum ActionType {\r\n    UpdateUserPreferences,\r\n    UpdateUserLocation,\r\n}\r\n\r\nexport const rootReducer: Reducer<StateInterface, DispatchAction> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ActionType.UpdateUserPreferences:\r\n            return {\r\n                ...state,\r\n                userPreferences: action.payload.userPreferences\r\n            };\r\n\r\n        case ActionType.UpdateUserLocation:\r\n            let userPreferences: UserPreferences;\r\n            if (state.userPreferences !== undefined) {\r\n                userPreferences = state.userPreferences!;\r\n                userPreferences.userLocation = action.payload.userLocation!;\r\n            } else {\r\n                userPreferences = new UserPreferences(action.payload.userLocation!);\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                userPreferences: action.payload.userPreferences,\r\n                userLocation: action.payload.userLocation,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","import { OpenWeatherMapGeocodingResponse } from \"../OpenWeatherResponse/OpenWeatherMapGeocodingResponse\";\r\n\r\nexport default class UserLocation {\r\n    latitude: number;\r\n    longitude: number;\r\n    name?: string;\r\n    country?: string;\r\n\r\n    constructor(latitude: number, longitude: number) {\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n    }\r\n\r\n    static defaultUserLocation(): UserLocation {\r\n        const oldTraffordStadiumLocation = new UserLocation(\r\n            53.4597954,\r\n            -2.2952338\r\n        );\r\n        oldTraffordStadiumLocation.name = \"Trafford Park\";\r\n        oldTraffordStadiumLocation.country = \"GB\";\r\n\r\n        return oldTraffordStadiumLocation;\r\n    }\r\n\r\n    static userLocationFromResponse(openWeatherMapGeocodingResponse?: OpenWeatherMapGeocodingResponse): UserLocation {\r\n        if (openWeatherMapGeocodingResponse === undefined) {\r\n            throw new Error('Error on parsing');\r\n        }\r\n\r\n        const userLocation: UserLocation = new UserLocation(\r\n            openWeatherMapGeocodingResponse.lat,\r\n            openWeatherMapGeocodingResponse.lon\r\n        );\r\n        userLocation.name = openWeatherMapGeocodingResponse.name;\r\n        userLocation.country = openWeatherMapGeocodingResponse.country;\r\n\r\n        return userLocation;\r\n    }\r\n}","import UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\nimport { loadGeocodingInfo } from \"../services/OpenWeatherMapApi\";\r\n\r\nexport class LocationUtilities {\r\n    static loadUserLocationIfNeeded(userLocation: UserLocation | undefined, updateUserLocationFunction: (userLocation: UserLocation) => void): Promise<void> {\r\n        return new Promise<void>(async (resolve, _) => {\r\n            if (userLocation !== undefined) {\r\n                resolve();\r\n            }\r\n\r\n            try {\r\n                let userLocation = await LocationUtilities.loadCurrentUserLocation();\r\n                updateUserLocationFunction(userLocation);\r\n\r\n                loadGeocodingInfo(userLocation.latitude, userLocation.longitude).then((openWeatherMapGeocodingResponse) => {\r\n                    userLocation = UserLocation.userLocationFromResponse(openWeatherMapGeocodingResponse);\r\n                    updateUserLocationFunction(userLocation);\r\n                });\r\n            } catch (_) {\r\n            } finally {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n    static loadCurrentUserLocation(): Promise<UserLocation> {\r\n        return new Promise<UserLocation>((resolve, reject) => {\r\n            try {\r\n                if (\"geolocation\" in navigator) {\r\n                    const successCallback = ((location: GeolocationPosition) => {\r\n                        const userLocation = new UserLocation(location.coords.latitude, location.coords.longitude);\r\n                        resolve(userLocation);\r\n                    });\r\n\r\n                    const errorCallback = (() => {\r\n                        reject('Geolocation is unavailable');\r\n                    });\r\n\r\n                    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\r\n                } else {\r\n                    reject('Geolocation is unavailable');\r\n                }\r\n            } catch (_) {\r\n                reject(`Error on get user location - ${_}`);\r\n            }\r\n        });\r\n    }\r\n}","import UserLocation from \"./UserLocation\";\r\n\r\nexport default class UserPreferences {\r\n    userLocation: UserLocation;\r\n\r\n    constructor(userLocation: UserLocation) {\r\n        this.userLocation = userLocation;\r\n    }\r\n}","import { Dispatch } from \"redux\";\r\nimport UserLocation from \"../data/model/UserPreferences/UserLocation\";\r\nimport UserPreferences from \"../data/model/UserPreferences/UserPreferences\";\r\nimport { ActionType, DispatchAction } from \"./root-reducer\";\r\n\r\nexport interface StateProps {\r\n    userPreferences: string;\r\n};\r\n\r\nexport class RootDispatcher {\r\n\r\n    private readonly dispatch: Dispatch<DispatchAction>;\r\n\r\n    constructor(dispatch: Dispatch<DispatchAction>) {\r\n        this.dispatch = dispatch;\r\n    }\r\n\r\n    updateUserPreferences = (userPreferences: UserPreferences | undefined) => this.dispatch({\r\n        type: ActionType.UpdateUserPreferences,\r\n        payload: {\r\n            userPreferences\r\n        },\r\n    });\r\n    \r\n    updateUserLocation = (userLocation: UserLocation | undefined) => this.dispatch({\r\n        type: ActionType.UpdateUserLocation,\r\n        payload: {\r\n            userLocation\r\n        },\r\n    });    \r\n}","import { useEffect, useState } from 'react';\r\nimport { WeatherDailyInfo } from '../../components/WeatherDailyInfo';\r\nimport { WeatherInfoMap } from '../../data/model/WeatherInfo/response/WeatherInfoMap';\r\nimport { DailyWeatherInfo } from '../../data/model/WeatherInfo/DailyWeatherInfo';\r\nimport { loadWeekWeatherInfo } from '../../services/OpenWeatherMapApi';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './styles.scss';\r\nimport DefaultAppBar from '../../components/DefaultAppBar';\r\nimport { LocationUtilities } from '../../utils/locationUtils';\r\nimport UserLocation from '../../data/model/UserPreferences/UserLocation';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootDispatcher, StateProps } from '../../store/root-redux';\r\nimport { StateInterface } from '../../store/root-reducer';\r\nimport UserPreferences from '../../data/model/UserPreferences/UserPreferences';\r\nimport { RSA_NO_PADDING } from 'node:constants';\r\n\r\ninterface StateInterfaceProps {\r\n    userLocation: UserLocation | undefined;\r\n}\r\n\r\nexport function HomePage() {\r\n    const [weekWeatherInfos, setWeekWeatherInfos] = useState<Array<DailyWeatherInfo>>([]);\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n\r\n    const { userLocation } = useSelector<StateInterfaceProps, StateInterfaceProps>((state: StateInterfaceProps) => {\r\n        return {\r\n            userLocation: state.userLocation,\r\n        }\r\n    });\r\n\r\n    const rootDispatcher = new RootDispatcher(useDispatch());\r\n\r\n    useEffect(() => {\r\n        async function fetchMyAPI() {\r\n            const weekWeatherInfo = await loadWeekWeatherInfo();\r\n            if (weekWeatherInfo !== undefined) {\r\n                let weekWeatherInfos = weekWeatherInfo.daily.map((weatherInfoMap, _) => WeatherInfoMap.toDailyWeatherInfo(weatherInfoMap));\r\n                weekWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n                if (weekWeatherInfos.length > 5) {\r\n                    weekWeatherInfos = weekWeatherInfos.slice(0, 5);\r\n                }\r\n\r\n                setWeekWeatherInfos(weekWeatherInfos);\r\n            }\r\n        }\r\n\r\n        setLoading(true);\r\n        Promise.all([\r\n            LocationUtilities.loadUserLocationIfNeeded(\r\n                userLocation,\r\n                rootDispatcher.updateUserLocation,\r\n            ),\r\n            fetchMyAPI(),\r\n        ]).then(() =>\r\n            setLoading(false)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HomePageMain\">\r\n            <DefaultAppBar />\r\n\r\n            <div className=\"WeekWeatherInfo\">\r\n                {isLoading ?\r\n                    <CircularProgress />\r\n                    : weekWeatherInfos !== undefined &&\r\n                    weekWeatherInfos.map((dayWeatherInfo, _) =>\r\n                        <WeatherDailyInfo weatherDailyInfo={dayWeatherInfo} />\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useMemo } from 'react';\r\nimport { HourlyWeatherInfo } from '../../data/model/WeatherInfo/HourlyWeatherInfo';\r\n\r\nimport { scaleTime, scaleLinear } from '@vx/scale';\r\nimport { AxisLeft, AxisBottom } from '@vx/axis';\r\nimport { Group } from '@vx/group';\r\nimport { AreaClosed } from '@vx/shape';\r\nimport { LinearGradient } from '@vx/gradient';\r\nimport { extent, max, min } from 'd3-array';\r\n\r\ntype WeatherHourlyInfoProps = {\r\n  weatherDailyInfo: Array<HourlyWeatherInfo>\r\n}\r\n\r\nexport const WeatherHourlyChart = ({ weatherDailyInfo }: WeatherHourlyInfoProps) => {\r\n  // Dimensions\r\n  const margin = {\r\n    top: 30,\r\n    left: 60,\r\n    right: 40,\r\n    bottom: 80,\r\n  };\r\n\r\n  const width = 640 + margin.left + margin.right;\r\n  const height = 360 + margin.top + margin.bottom;\r\n\r\n  // Bounds\r\n  const innerWidth = width - margin.left - margin.right;\r\n  const innerHeight = height - margin.top - margin.bottom;\r\n\r\n  // Accessors\r\n  const getDate = (d: HourlyWeatherInfo): Date => d.date;\r\n  const getTemperatureValue = (d: HourlyWeatherInfo): number => d.temperature;\r\n\r\n  // Scales\r\n  const xDateValues = useMemo(\r\n    () =>\r\n      scaleTime({\r\n        range: [margin.left, innerWidth + margin.left],\r\n        domain: extent(weatherDailyInfo, getDate) as [Date, Date],\r\n      }),\r\n    [innerWidth, margin.left],\r\n  );\r\n\r\n  const yMin = (min(weatherDailyInfo, getTemperatureValue) || 0);\r\n  const yMax = (max(weatherDailyInfo, getTemperatureValue) || 0);\r\n  const yTemperatureValues = useMemo(\r\n    () =>\r\n      scaleLinear({\r\n        range: [innerHeight + margin.top, margin.top],\r\n        domain: [yMin, yMax],\r\n        nice: true,\r\n      }),\r\n    [margin.top, innerHeight],\r\n  );\r\n\r\n  return (\r\n    <div className=\"WeatherHourlyChartMain\">\r\n      <svg width={width} height={height}>\r\n        <rect\r\n          x={margin.left}\r\n          y={margin.top}\r\n          width={innerWidth}\r\n          height={innerHeight}\r\n          fill=\"url(#area-background-gradient)\"\r\n          rx={14}\r\n        />\r\n        <LinearGradient id=\"area-background-gradient\" from=\"#f3f3f3\" to=\"#e2e2e2\" vertical />\r\n        <LinearGradient\r\n          from='#FF8F00'\r\n          to='#FFE082'\r\n          id='gradient'\r\n          vertical={false}\r\n        />\r\n        <Group top={0} left={0}>\r\n          <AreaClosed<HourlyWeatherInfo>\r\n            data={weatherDailyInfo}\r\n            x={d => xDateValues(getDate(d)) ?? 0}\r\n            y={d => yTemperatureValues(getTemperatureValue(d)) ?? 0}\r\n            yScale={yTemperatureValues}\r\n            fill=\"url(#gradient)\"\r\n          />\r\n\r\n          <AxisLeft\r\n            scale={yTemperatureValues}\r\n            top={0}\r\n            left={margin.left}\r\n            label={'Temperature (Fº)'}\r\n            stroke={'#1b1a1e'}\r\n          />\r\n\r\n          <AxisBottom\r\n            scale={xDateValues}\r\n            top={innerHeight + margin.top}\r\n            label={'Hour'}\r\n            stroke={'#1b1a1e'}\r\n          />\r\n        </Group>\r\n      </svg>\r\n    </div>\r\n  );\r\n}","import { useEffect, useState } from \"react\";\r\nimport { WeatherHourlyChart } from \"../../components/WeatherHourlyChart\";\r\nimport { HourlyWeatherInfo } from \"../../data/model/WeatherInfo/HourlyWeatherInfo\";\r\nimport { WeatherInfoMap } from \"../../data/model/WeatherInfo/response/WeatherInfoMap\";\r\nimport { loadDayWeatherInfo } from \"../../services/OpenWeatherMapApi\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport './styles.scss';\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport DefaultAppBar from \"../../components/DefaultAppBar\";\r\nimport { DateUtilities } from \"../../utils/utils\";\r\nimport { LocationUtilities } from \"../../utils/locationUtils\";\r\nimport UserLocation from \"../../data/model/UserPreferences/UserLocation\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { RootDispatcher } from \"../../store/root-redux\";\r\n\r\ninterface StateInterfaceProps {\r\n    userLocation: UserLocation | undefined;\r\n}\r\n\r\nexport default function HourlyWeatherInfoPage() {\r\n    const [dayWeatherInfos, setDayWeatherInfos] = useState<Array<HourlyWeatherInfo> | undefined>(undefined);\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n\r\n    const { userLocation } = useSelector<StateInterfaceProps, StateInterfaceProps>((state: StateInterfaceProps) => {\r\n        return {\r\n            userLocation: state.userLocation,\r\n        }\r\n    });\r\n\r\n    const rootDispatcher = new RootDispatcher(useDispatch());\r\n\r\n    const { path } = useRouteMatch();\r\n\r\n    const day = (): Date => DateUtilities.getDateAccordingToCurrentWeekDayName(path);\r\n\r\n    useEffect(() => {\r\n        async function fetchMyAPI() {\r\n            const dayWeatherInfo = await loadDayWeatherInfo();\r\n            if (dayWeatherInfo !== undefined) {\r\n                let dayWeatherInfos: Array<HourlyWeatherInfo> = dayWeatherInfo.hourly.map((weatherInfoMap, _) => WeatherInfoMap.toHourlyWeatherInfo(weatherInfoMap));\r\n                dayWeatherInfos.sort((weatherInfoA, weatherInfoB) => weatherInfoA.date.getTime() - weatherInfoB.date.getTime());\r\n                let firstOfDay: HourlyWeatherInfo = dayWeatherInfos.filter((hourlyWeatherInfo) => hourlyWeatherInfo.date.getHours() === 0)[0];\r\n                let indexOfFirstOfDay = dayWeatherInfos.indexOf(firstOfDay);\r\n                dayWeatherInfos = dayWeatherInfos.slice(indexOfFirstOfDay, indexOfFirstOfDay + 24);\r\n\r\n                setDayWeatherInfos(dayWeatherInfos);\r\n            }\r\n\r\n        }\r\n\r\n        setLoading(true);\r\n        Promise.all([\r\n            LocationUtilities.loadUserLocationIfNeeded(\r\n                userLocation,\r\n                rootDispatcher.updateUserLocation,\r\n            ),\r\n            fetchMyAPI(),\r\n        ]).then(() =>\r\n            setLoading(false)\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"HourlyWeatherInfoMain\">\r\n            <DefaultAppBar />\r\n\r\n            <div className=\"HourlyWeatherInfoChart\">\r\n                {isLoading ?\r\n                    <CircularProgress />\r\n                    : dayWeatherInfos !== undefined &&\r\n                    <WeatherHourlyChart\r\n                        weatherDailyInfo={dayWeatherInfos} />\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { DispatchAction, StateInterface, rootReducer } from \"./root-reducer\";\r\nimport { createStore } from \"redux\";\r\n\r\nexport const store = createStore<StateInterface, DispatchAction, null, null>(rootReducer);","import { Provider } from \"react-redux\";\r\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport { HomePage } from \"./pages/HomePage\";\r\nimport HourlyWeatherInfoPage from \"./pages/HourlyWeatherInfo\";\r\nimport { store } from \"./store\";\r\nimport { DateUtilities } from \"./utils/utils\";\r\n\r\nexport default function Routes() {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                    <Route path={\r\n                        [\r\n                            ...[\"/today\", \"/tomorrow\", \"/yesterday\"],\r\n                            ...DateUtilities.days.map((day, _, __) => `/${day}`)\r\n                        ]}\r\n                        component={HourlyWeatherInfoPage}\r\n                    />\r\n                    <Route path=\"/\" component={HomePage} />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </Provider>\r\n    );\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Routes from './Routes';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Routes />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}